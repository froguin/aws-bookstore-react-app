{"ast":null,"code":"/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nvar LOG_LEVELS = {\n  VERBOSE: 1,\n  DEBUG: 2,\n  INFO: 3,\n  WARN: 4,\n  ERROR: 5\n};\n/**\n * Write logs\n * @class Logger\n */\n\nvar ConsoleLogger =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * @param {string} name - Name of the logger\n   */\n  function ConsoleLogger(name, level) {\n    if (level === void 0) {\n      level = 'WARN';\n    }\n\n    this.name = name;\n    this.level = level;\n  }\n\n  ConsoleLogger.prototype._padding = function (n) {\n    return n < 10 ? '0' + n : '' + n;\n  };\n\n  ConsoleLogger.prototype._ts = function () {\n    var dt = new Date();\n    return [this._padding(dt.getMinutes()), this._padding(dt.getSeconds())].join(':') + '.' + dt.getMilliseconds();\n  };\n  /**\n   * Write log\n   * @method\n   * @memeberof Logger\n   * @param {string} type - log type, default INFO\n   * @param {string|object} msg - Logging message or object\n   */\n\n\n  ConsoleLogger.prototype._log = function (type) {\n    var msg = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      msg[_i - 1] = arguments[_i];\n    }\n\n    var logger_level_name = this.level;\n\n    if (ConsoleLogger.LOG_LEVEL) {\n      logger_level_name = ConsoleLogger.LOG_LEVEL;\n    }\n\n    if (typeof window !== 'undefined' && window.LOG_LEVEL) {\n      logger_level_name = window.LOG_LEVEL;\n    }\n\n    var logger_level = LOG_LEVELS[logger_level_name];\n    var type_level = LOG_LEVELS[type];\n\n    if (!(type_level >= logger_level)) {\n      // Do nothing if type is not greater than or equal to logger level (handle undefined)\n      return;\n    }\n\n    var log = console.log.bind(console);\n\n    if (type === 'ERROR' && console.error) {\n      log = console.error.bind(console);\n    }\n\n    if (type === 'WARN' && console.warn) {\n      log = console.warn.bind(console);\n    }\n\n    var prefix = \"[\" + type + \"] \" + this._ts() + \" \" + this.name;\n\n    if (msg.length === 1 && typeof msg[0] === 'string') {\n      log(prefix + \" - \" + msg[0]);\n    } else if (msg.length === 1) {\n      log(prefix, msg[0]);\n    } else if (typeof msg[0] === 'string') {\n      var obj = msg.slice(1);\n\n      if (obj.length === 1) {\n        obj = obj[0];\n      }\n\n      log(prefix + \" - \" + msg[0], obj);\n    } else {\n      log(prefix, msg);\n    }\n  };\n  /**\n   * Write General log. Default to INFO\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n\n\n  ConsoleLogger.prototype.log = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, __spreadArrays(['INFO'], msg));\n  };\n  /**\n   * Write INFO log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n\n\n  ConsoleLogger.prototype.info = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, __spreadArrays(['INFO'], msg));\n  };\n  /**\n   * Write WARN log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n\n\n  ConsoleLogger.prototype.warn = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, __spreadArrays(['WARN'], msg));\n  };\n  /**\n   * Write ERROR log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n\n\n  ConsoleLogger.prototype.error = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, __spreadArrays(['ERROR'], msg));\n  };\n  /**\n   * Write DEBUG log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n\n\n  ConsoleLogger.prototype.debug = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, __spreadArrays(['DEBUG'], msg));\n  };\n  /**\n   * Write VERBOSE log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n\n\n  ConsoleLogger.prototype.verbose = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, __spreadArrays(['VERBOSE'], msg));\n  };\n\n  ConsoleLogger.LOG_LEVEL = null;\n  return ConsoleLogger;\n}();\n\nexport { ConsoleLogger };","map":{"version":3,"mappings":"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","names":["LOG_LEVELS","VERBOSE","DEBUG","INFO","WARN","ERROR","name","level","ConsoleLogger","n","dt","Date","_padding","getMinutes","getSeconds","join","getMilliseconds","type","msg","logger_level_name","LOG_LEVEL","window","logger_level","type_level","log","console","bind","error","warn","prefix","_ts","length","obj","slice","_log","apply","__spreadArrays"],"sourceRoot":"","sources":["../../src/Logger/ConsoleLogger.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}