{"ast":null,"code":"/**\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { ConsoleLogger as Logger } from '../Logger';\nimport JS from '../JS';\nimport Amplify from '../Amplify';\n/**\n * Provides a means to registering a service worker in the browser\n * and communicating with it via postMessage events.\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/\n *\n * postMessage events are currently not supported in all browsers. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\n *\n * At the minmum this class will register the service worker and listen\n * and attempt to dispatch messages on state change and record analytics\n * events based on the service worker lifecycle.\n */\n\nvar ServiceWorkerClass =\n/** @class */\nfunction () {\n  function ServiceWorkerClass() {\n    // The AWS Amplify logger\n    this._logger = new Logger('ServiceWorker');\n  }\n\n  Object.defineProperty(ServiceWorkerClass.prototype, \"serviceWorker\", {\n    /**\n     * Get the currently active service worker\n     */\n    get: function get() {\n      return this._serviceWorker;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Register the service-worker.js file in the browser\n   * Make sure the service-worker.js is part of the build\n   * for example with Angular, modify the angular-cli.json file\n   * and add to \"assets\" array \"service-worker.js\"\n   * @param {string} - (optional) Service worker file. Defaults to \"/service-worker.js\"\n   * @param {string} - (optional) The service worker scope. Defaults to \"/\"\n   *  - API Doc: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register\n   * @returns {Promise}\n   *\t- resolve(ServiceWorkerRegistration)\n   *\t- reject(Error)\n   **/\n\n  ServiceWorkerClass.prototype.register = function (filePath, scope) {\n    var _this = this;\n\n    if (filePath === void 0) {\n      filePath = '/service-worker.js';\n    }\n\n    if (scope === void 0) {\n      scope = '/';\n    }\n\n    this._logger.debug(\"registering \" + filePath);\n\n    this._logger.debug(\"registering service worker with scope \" + scope);\n\n    return new Promise(function (resolve, reject) {\n      if (navigator && 'serviceWorker' in navigator) {\n        navigator.serviceWorker.register(filePath, {\n          scope: scope\n        }).then(function (registration) {\n          if (registration.installing) {\n            _this._serviceWorker = registration.installing;\n          } else if (registration.waiting) {\n            _this._serviceWorker = registration.waiting;\n          } else if (registration.active) {\n            _this._serviceWorker = registration.active;\n          }\n\n          _this._registration = registration;\n\n          _this._setupListeners();\n\n          _this._logger.debug(\"Service Worker Registration Success: \" + registration);\n\n          return resolve(registration);\n        }).catch(function (error) {\n          _this._logger.debug(\"Service Worker Registration Failed \" + error);\n\n          return reject(error);\n        });\n      } else {\n        return reject(new Error('Service Worker not available'));\n      }\n    });\n  };\n  /**\n   * Enable web push notifications. If not subscribed, a new subscription will\n   * be created and registered.\n   * \tTest Push Server: https://web-push-codelab.glitch.me/\n   * \tPush Server Libraries: https://github.com/web-push-libs/\n   * \tAPI Doc: https://developers.google.com/web/fundamentals/codelabs/push-notifications/\n   * @param publicKey\n   * @returns {Promise}\n   * \t- resolve(PushSubscription)\n   *  - reject(Error)\n   */\n\n\n  ServiceWorkerClass.prototype.enablePush = function (publicKey) {\n    var _this = this;\n\n    if (!this._registration) throw new Error('Service Worker not registered');\n    this._publicKey = publicKey;\n    return new Promise(function (resolve, reject) {\n      if (JS.browserOrNode().isBrowser) {\n        _this._registration.pushManager.getSubscription().then(function (subscription) {\n          if (subscription) {\n            _this._subscription = subscription;\n\n            _this._logger.debug(\"User is subscribed to push: \" + JSON.stringify(subscription));\n\n            resolve(subscription);\n          } else {\n            _this._logger.debug(\"User is NOT subscribed to push\");\n\n            return _this._registration.pushManager.subscribe({\n              userVisibleOnly: true,\n              applicationServerKey: _this._urlB64ToUint8Array(publicKey)\n            }).then(function (subscription) {\n              _this._subscription = subscription;\n\n              _this._logger.debug(\"User subscribed: \" + JSON.stringify(subscription));\n\n              resolve(subscription);\n            }).catch(function (error) {\n              _this._logger.error(error);\n            });\n          }\n        });\n      } else {\n        return reject(new Error('Service Worker not available'));\n      }\n    });\n  };\n  /**\n   * Convert a base64 encoded string to a Uint8 array for the push server key\n   * @param base64String\n   */\n\n\n  ServiceWorkerClass.prototype._urlB64ToUint8Array = function (base64String) {\n    var padding = '='.repeat((4 - base64String.length % 4) % 4);\n    var base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n    var rawData = window.atob(base64);\n    var outputArray = new Uint8Array(rawData.length);\n\n    for (var i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n\n    return outputArray;\n  };\n  /**\n   * Send a message to the service worker. The service worker needs\n   * to implement `self.addEventListener('message') to handle the\n   * message. This ***currently*** does not work in Safari or IE.\n   * @param {object | string} - An arbitrary JSON object or string message to send to the service worker\n   *\t- see: https://developer.mozilla.org/en-US/docs/Web/API/Transferable\n   * @returns {Promise}\n   **/\n\n\n  ServiceWorkerClass.prototype.send = function (message) {\n    if (this._serviceWorker) {\n      this._serviceWorker.postMessage(typeof message === 'object' ? JSON.stringify(message) : message);\n    }\n  };\n  /**\n   * Listen for service worker state change and message events\n   * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state\n   **/\n\n\n  ServiceWorkerClass.prototype._setupListeners = function () {\n    var _this = this;\n\n    this._serviceWorker.addEventListener('statechange', function (event) {\n      var currentState = _this._serviceWorker.state;\n\n      _this._logger.debug(\"ServiceWorker statechange: \" + currentState);\n\n      if (Amplify.Analytics && typeof Amplify.Analytics.record === 'function') {\n        Amplify.Analytics.record({\n          name: 'ServiceWorker',\n          attributes: {\n            state: currentState\n          }\n        });\n      }\n    });\n\n    this._serviceWorker.addEventListener('message', function (event) {\n      _this._logger.debug(\"ServiceWorker message event: \" + event);\n    });\n  };\n\n  return ServiceWorkerClass;\n}();\n\nexport default ServiceWorkerClass;","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","JS","Amplify","Object","ServiceWorkerClass","_serviceWorker","filePath","scope","_logger","debug","Promise","resolve","reject","navigator","serviceWorker","register","then","registration","installing","_this","waiting","active","_registration","_setupListeners","catch","error","Error","publicKey","_publicKey","browserOrNode","isBrowser","pushManager","getSubscription","subscription","_subscription","JSON","stringify","subscribe","userVisibleOnly","applicationServerKey","_urlB64ToUint8Array","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","message","postMessage","addEventListener","currentState","state","Analytics","record","name","attributes","event"],"sourceRoot":"","sources":["../../src/ServiceWorker/ServiceWorker.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}