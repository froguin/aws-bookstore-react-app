{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar crc32_1 = require(\"@aws-crypto/crc32\"); // All prelude components are unsigned, 32-bit integers\n\n\nvar PRELUDE_MEMBER_LENGTH = 4; // The prelude consists of two components\n\nvar PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2; // Checksums are always CRC32 hashes.\n\nvar CHECKSUM_LENGTH = 4; // Messages must include a full prelude, a prelude checksum, and a message checksum\n\nvar MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;\n/**\n * @internal\n */\n\nfunction splitMessage(_a) {\n  var byteLength = _a.byteLength,\n      byteOffset = _a.byteOffset,\n      buffer = _a.buffer;\n\n  if (byteLength < MINIMUM_MESSAGE_LENGTH) {\n    throw new Error('Provided message too short to accommodate event stream message overhead');\n  }\n\n  var view = new DataView(buffer, byteOffset, byteLength);\n  var messageLength = view.getUint32(0, false);\n\n  if (byteLength !== messageLength) {\n    throw new Error('Reported message length does not match received message length');\n  }\n\n  var headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);\n  var expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);\n  var expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);\n  var checksummer = new crc32_1.Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));\n\n  if (expectedPreludeChecksum !== checksummer.digest()) {\n    throw new Error(\"The prelude checksum specified in the message (\" + expectedPreludeChecksum + \") does not match the calculated CRC32 checksum (\" + checksummer.digest() + \")\");\n  }\n\n  checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));\n\n  if (expectedMessageChecksum !== checksummer.digest()) {\n    throw new Error(\"The message checksum (\" + checksummer.digest() + \") did not match the expected value of \" + expectedMessageChecksum);\n  }\n\n  return {\n    headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),\n    body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))\n  };\n}\n\nexports.splitMessage = splitMessage;","map":{"version":3,"mappings":";;;;;;AAAA,2C,CAEA;;;AACA,IAAMA,qBAAqB,GAAG,CAA9B,C,CACA;;AACA,IAAMC,cAAc,GAAGD,qBAAqB,GAAG,CAA/C,C,CACA;;AACA,IAAME,eAAe,GAAG,CAAxB,C,CACA;;AACA,IAAMC,sBAAsB,GAAGF,cAAc,GAAGC,eAAe,GAAG,CAAlE;AAUA;;;;AAGA,SAAgBE,YAAhB,CACIC,EADJ,EACuD;MAAjDC;MAAYC;MAAYC;;AAE1B,MAAIF,UAAU,GAAGH,sBAAjB,EAAyC;AACrC,UAAM,IAAIM,KAAJ,CACF,yEADE,CAAN;AAGH;;AAED,MAAMC,IAAI,GAAG,IAAIC,QAAJ,CAAaH,MAAb,EAAqBD,UAArB,EAAiCD,UAAjC,CAAb;AAEA,MAAMM,aAAa,GAAGF,IAAI,CAACG,SAAL,CAAe,CAAf,EAAkB,KAAlB,CAAtB;;AAEA,MAAIP,UAAU,KAAKM,aAAnB,EAAkC;AAC9B,UAAM,IAAIH,KAAJ,CACF,gEADE,CAAN;AAGH;;AAED,MAAMK,YAAY,GAAGJ,IAAI,CAACG,SAAL,CAAeb,qBAAf,EAAsC,KAAtC,CAArB;AACA,MAAMe,uBAAuB,GAAGL,IAAI,CAACG,SAAL,CAAeZ,cAAf,EAA+B,KAA/B,CAAhC;AACA,MAAMe,uBAAuB,GAAGN,IAAI,CAACG,SAAL,CAC5BP,UAAU,GAAGJ,eADe,EAE5B,KAF4B,CAAhC;AAKA,MAAMe,WAAW,GAAI,IAAIC,aAAJ,EAAD,CAAYC,MAAZ,CAChB,IAAIC,UAAJ,CAAeZ,MAAf,EAAuBD,UAAvB,EAAmCN,cAAnC,CADgB,CAApB;;AAGA,MACIc,uBAAuB,KAAKE,WAAW,CAACI,MAAZ,EADhC,EAEE;AACE,UAAM,IAAIZ,KAAJ,CACF,oDACIM,uBADJ,GAC2B,kDAD3B,GAGIE,WAAW,CAACI,MAAZ,EAHJ,GAGwB,GAJtB,CAAN;AAOH;;AAEDJ,aAAW,CAACE,MAAZ,CAAmB,IAAIC,UAAJ,CACfZ,MADe,EAEfD,UAAU,GAAGN,cAFE,EAGfK,UAAU,IAAIL,cAAc,GAAGC,eAArB,CAHK,CAAnB;;AAKA,MAAIc,uBAAuB,KAAKC,WAAW,CAACI,MAAZ,EAAhC,EAAsD;AAClD,UAAM,IAAIZ,KAAJ,CACF,2BACIQ,WAAW,CAACI,MAAZ,EADJ,GACwB,wCADxB,GAEyCL,uBAHvC,CAAN;AAKH;;AAED,SAAO;AACHM,WAAO,EAAE,IAAIX,QAAJ,CACLH,MADK,EAELD,UAAU,GAAGN,cAAb,GAA8BC,eAFzB,EAGLY,YAHK,CADN;AAMHS,QAAI,EAAE,IAAIH,UAAJ,CACFZ,MADE,EAEFD,UAAU,GAAGN,cAAb,GAA8BC,eAA9B,GAAgDY,YAF9C,EAGFF,aAAa,GAAGE,YAAhB,IACIb,cAAc,GAAGC,eAAjB,GAAmCA,eADvC,CAHE;AANH,GAAP;AAcH;;AApEDsB","names":["PRELUDE_MEMBER_LENGTH","PRELUDE_LENGTH","CHECKSUM_LENGTH","MINIMUM_MESSAGE_LENGTH","splitMessage","_a","byteLength","byteOffset","buffer","Error","view","DataView","messageLength","getUint32","headerLength","expectedPreludeChecksum","expectedMessageChecksum","checksummer","crc32_1","update","Uint8Array","digest","headers","body","exports"],"sourceRoot":"","sources":["../src/splitMessage.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}