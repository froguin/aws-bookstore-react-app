{"ast":null,"code":"/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport * as LexRuntime from 'aws-sdk/clients/lexruntime';\nimport { ConsoleLogger as Logger, AWS, Credentials } from '@aws-amplify/core';\nvar logger = new Logger('AWSLexProvider');\n\nvar AWSLexProvider =\n/** @class */\nfunction (_super) {\n  __extends(AWSLexProvider, _super);\n\n  function AWSLexProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, options) || this;\n\n    _this.aws_lex = new LexRuntime({\n      region: _this._config.region\n    });\n    _this._botsCompleteCallback = {};\n    return _this;\n  }\n\n  AWSLexProvider.prototype.getProviderName = function () {\n    return 'AWSLexProvider';\n  };\n\n  AWSLexProvider.prototype.responseCallback = function (err, data, res, rej, botname) {\n    var _this = this;\n\n    if (err) {\n      rej(err);\n      return;\n    } else {\n      // Check if state is fulfilled to resolve onFullfilment promise\n      logger.debug('postContent state', data.dialogState);\n\n      if (data.dialogState === 'ReadyForFulfillment' || data.dialogState === 'Fulfilled') {\n        if (typeof this._botsCompleteCallback[botname] === 'function') {\n          setTimeout(function () {\n            return _this._botsCompleteCallback[botname](null, {\n              slots: data.slots\n            });\n          }, 0);\n        }\n\n        if (this._config && typeof this._config[botname].onComplete === 'function') {\n          setTimeout(function () {\n            return _this._config[botname].onComplete(null, {\n              slots: data.slots\n            });\n          }, 0);\n        }\n      }\n\n      res(data);\n\n      if (data.dialogState === 'Failed') {\n        if (typeof this._botsCompleteCallback[botname] === 'function') {\n          setTimeout(function () {\n            return _this._botsCompleteCallback[botname]('Bot conversation failed');\n          }, 0);\n        }\n\n        if (this._config && typeof this._config[botname].onComplete === 'function') {\n          setTimeout(function () {\n            return _this._config[botname].onComplete('Bot conversation failed');\n          }, 0);\n        }\n      }\n    }\n  };\n\n  AWSLexProvider.prototype.sendMessage = function (botname, message) {\n    var _this = this;\n\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, params;\n\n        var _this = this;\n\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!this._config[botname]) {\n                return [2\n                /*return*/\n                , rej('Bot ' + botname + ' does not exist')];\n              }\n\n              return [4\n              /*yield*/\n              , Credentials.get()];\n\n            case 1:\n              credentials = _a.sent();\n\n              if (!credentials) {\n                return [2\n                /*return*/\n                , rej('No credentials')];\n              }\n\n              AWS.config.update({\n                credentials: credentials\n              });\n              this.aws_lex = new LexRuntime({\n                region: this._config[botname].region,\n                credentials: credentials\n              });\n\n              if (typeof message === 'string') {\n                params = {\n                  botAlias: this._config[botname].alias,\n                  botName: botname,\n                  inputText: message,\n                  userId: credentials.identityId\n                };\n                logger.debug('postText to lex', message);\n                this.aws_lex.postText(params, function (err, data) {\n                  _this.responseCallback(err, data, res, rej, botname);\n                });\n              } else {\n                if (message.options['messageType'] === 'voice') {\n                  params = {\n                    botAlias: this._config[botname].alias,\n                    botName: botname,\n                    contentType: 'audio/x-l16; sample-rate=16000',\n                    inputStream: message.content,\n                    userId: credentials.identityId,\n                    accept: 'audio/mpeg'\n                  };\n                } else {\n                  params = {\n                    botAlias: this._config[botname].alias,\n                    botName: botname,\n                    contentType: 'text/plain; charset=utf-8',\n                    inputStream: message.content,\n                    userId: credentials.identityId,\n                    accept: 'audio/mpeg'\n                  };\n                }\n\n                logger.debug('postContent to lex', message);\n                this.aws_lex.postContent(params, function (err, data) {\n                  _this.responseCallback(err, data, res, rej, botname);\n                });\n              }\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  AWSLexProvider.prototype.onComplete = function (botname, callback) {\n    if (!this._config[botname]) {\n      throw new ErrorEvent('Bot ' + botname + ' does not exist');\n    }\n\n    this._botsCompleteCallback[botname] = callback;\n  };\n\n  return AWSLexProvider;\n}(AbstractInteractionsProvider);\n\nexport { AWSLexProvider };","map":{"version":3,"mappings":"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","names":["AbstractInteractionsProvider","LexRuntime","ConsoleLogger","Logger","AWS","Credentials","logger","__extends","options","_super","_this","aws_lex","region","_config","_botsCompleteCallback","AWSLexProvider","err","data","res","rej","botname","debug","dialogState","setTimeout","slots","onComplete","message","Promise","get","credentials","_a","config","update","params","botAlias","alias","botName","inputText","userId","identityId","postText","responseCallback","contentType","inputStream","content","accept","postContent","callback","ErrorEvent"],"sourceRoot":"","sources":["../../src/Providers/AWSLexProvider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}