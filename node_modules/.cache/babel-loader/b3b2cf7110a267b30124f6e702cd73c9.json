{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { ConsoleLogger as Logger } from './Logger';\nimport StorageHelper from './StorageHelper';\nimport { AWS } from './Facet';\nimport JS from './JS';\nimport { FacebookOAuth, GoogleOAuth } from './OAuthHelper';\nimport Amplify from './Amplify';\nvar logger = new Logger('Credentials');\n\nvar Credentials =\n/** @class */\nfunction () {\n  function Credentials(config) {\n    this._gettingCredPromise = null;\n    this._refreshHandlers = {};\n    this.configure(config);\n    this._refreshHandlers['google'] = GoogleOAuth.refreshGoogleToken;\n    this._refreshHandlers['facebook'] = FacebookOAuth.refreshFacebookToken;\n  }\n\n  Credentials.prototype.getCredSource = function () {\n    return this._credentials_source;\n  };\n\n  Credentials.prototype.configure = function (config) {\n    if (!config) return this._config || {};\n    this._config = Object.assign({}, this._config, config);\n    var refreshHandlers = this._config.refreshHandlers; // If the developer has provided an object of refresh handlers,\n    // then we can merge the provided handlers with the current handlers.\n\n    if (refreshHandlers) {\n      this._refreshHandlers = __assign(__assign({}, this._refreshHandlers), refreshHandlers);\n    }\n\n    this._storage = this._config.storage;\n\n    if (!this._storage) {\n      this._storage = new StorageHelper().getStorage();\n    }\n\n    this._storageSync = Promise.resolve();\n\n    if (typeof this._storage['sync'] === 'function') {\n      this._storageSync = this._storage['sync']();\n    }\n\n    return this._config;\n  };\n\n  Credentials.prototype.get = function () {\n    logger.debug('getting credentials');\n    return this._pickupCredentials();\n  };\n\n  Credentials.prototype._pickupCredentials = function () {\n    logger.debug('picking up credentials');\n\n    if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {\n      logger.debug('getting new cred promise');\n\n      if (AWS.config && AWS.config.credentials && AWS.config.credentials instanceof AWS.Credentials) {\n        this._gettingCredPromise = JS.makeQuerablePromise(this._setCredentialsFromAWS());\n      } else {\n        this._gettingCredPromise = JS.makeQuerablePromise(this._keepAlive());\n      }\n    } else {\n      logger.debug('getting old cred promise');\n    }\n\n    return this._gettingCredPromise;\n  };\n\n  Credentials.prototype._keepAlive = function () {\n    logger.debug('checking if credentials exists and not expired');\n    var cred = this._credentials;\n\n    if (cred && !this._isExpired(cred)) {\n      logger.debug('credentials not changed and not expired, directly return');\n      return Promise.resolve(cred);\n    }\n\n    logger.debug('need to get a new credential or refresh the existing one');\n\n    if (Amplify.Auth && typeof Amplify.Auth.currentUserCredentials === 'function') {\n      return Amplify.Auth.currentUserCredentials();\n    } else {\n      return Promise.reject('No Auth module registered in Amplify');\n    }\n  };\n\n  Credentials.prototype.refreshFederatedToken = function (federatedInfo) {\n    var _this = this;\n\n    logger.debug('Getting federated credentials');\n    var provider = federatedInfo.provider,\n        user = federatedInfo.user;\n    var token = federatedInfo.token;\n    var expires_at = federatedInfo.expires_at;\n    var identity_id = federatedInfo.identity_id;\n    var that = this;\n    logger.debug('checking if federated jwt token expired');\n\n    if (expires_at > new Date().getTime()) {\n      // if not expired\n      logger.debug('token not expired');\n      return this._setCredentialsFromFederation({\n        provider: provider,\n        token: token,\n        user: user,\n        identity_id: identity_id,\n        expires_at: expires_at\n      });\n    } else {\n      // if refresh handler exists\n      if (that._refreshHandlers[provider] && typeof that._refreshHandlers[provider] === 'function') {\n        logger.debug('getting refreshed jwt token from federation provider');\n        return that._refreshHandlers[provider]().then(function (data) {\n          logger.debug('refresh federated token sucessfully', data);\n          token = data.token;\n          identity_id = data.identity_id;\n          expires_at = data.expires_at;\n          return that._setCredentialsFromFederation({\n            provider: provider,\n            token: token,\n            user: user,\n            identity_id: identity_id,\n            expires_at: expires_at\n          });\n        }).catch(function (e) {\n          logger.debug('refresh federated token failed', e);\n\n          _this.clear();\n\n          return Promise.reject('refreshing federation token failed: ' + e);\n        });\n      } else {\n        logger.debug('no refresh handler for provider:', provider);\n        this.clear();\n        return Promise.reject('no refresh handler for provider');\n      }\n    }\n  };\n\n  Credentials.prototype._isExpired = function (credentials) {\n    if (!credentials) {\n      logger.debug('no credentials for expiration check');\n      return true;\n    }\n\n    logger.debug('is this credentials expired?', credentials);\n    var ts = new Date().getTime();\n    var delta = 10 * 60 * 1000; // 10 minutes\n\n    var expired = credentials.expired,\n        expireTime = credentials.expireTime;\n\n    if (!expired && expireTime > ts + delta) {\n      return false;\n    }\n\n    return true;\n  };\n\n  Credentials.prototype._setCredentialsForGuest = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var attempted, _a, identityPoolId, region, mandatorySignIn, identityId, e_1, credentials, that;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            attempted = false;\n            logger.debug('setting credentials for guest');\n            _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region, mandatorySignIn = _a.mandatorySignIn;\n\n            if (mandatorySignIn) {\n              return [2\n              /*return*/\n              , Promise.reject('cannot get guest credentials when mandatory signin enabled')];\n            }\n\n            if (!identityPoolId) {\n              logger.debug('No Cognito Federated Identity pool provided');\n              return [2\n              /*return*/\n              , Promise.reject('No Cognito Federated Identity pool provided')];\n            }\n\n            identityId = undefined;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this._storageSync];\n\n          case 2:\n            _b.sent();\n\n            identityId = this._storage.getItem('CognitoIdentityId-' + identityPoolId);\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_1 = _b.sent();\n            logger.debug('Failed to get the cached identityId', e_1);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            credentials = new AWS.CognitoIdentityCredentials({\n              IdentityPoolId: identityPoolId,\n              IdentityId: identityId ? identityId : undefined\n            }, {\n              region: region\n            });\n            that = this;\n            return [2\n            /*return*/\n            , this._loadCredentials(credentials, 'guest', false, null).then(function (res) {\n              return res;\n            }).catch(function (e) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var newCredentials;\n                return __generator(this, function (_a) {\n                  // If identity id is deleted in the console, we make one attempt to recreate it\n                  // and remove existing id from cache.\n                  if (e.code === 'ResourceNotFoundException' && e.message === \"Identity '\" + identityId + \"' not found.\" && !attempted) {\n                    attempted = true;\n                    logger.debug('Failed to load guest credentials');\n\n                    this._storage.removeItem('CognitoIdentityId-' + identityPoolId);\n\n                    credentials.clearCachedId();\n                    newCredentials = new AWS.CognitoIdentityCredentials({\n                      IdentityPoolId: identityPoolId,\n                      IdentityId: undefined\n                    }, {\n                      region: region\n                    });\n                    return [2\n                    /*return*/\n                    , this._loadCredentials(newCredentials, 'guest', false, null)];\n                  } else {\n                    return [2\n                    /*return*/\n                    , e];\n                  }\n\n                  return [2\n                  /*return*/\n                  ];\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  Credentials.prototype._setCredentialsFromAWS = function () {\n    var credentials = AWS.config.credentials;\n    logger.debug('setting credentials from aws');\n    var that = this;\n\n    if (credentials instanceof AWS.Credentials) {\n      return Promise.resolve(credentials);\n    } else {\n      logger.debug('AWS.config.credentials is not an instance of AWS Credentials');\n      return Promise.reject('AWS.config.credentials is not an instance of AWS Credentials');\n    }\n  };\n\n  Credentials.prototype._setCredentialsFromFederation = function (params) {\n    var provider = params.provider,\n        token = params.token,\n        identity_id = params.identity_id,\n        user = params.user,\n        expires_at = params.expires_at;\n    var domains = {\n      google: 'accounts.google.com',\n      facebook: 'graph.facebook.com',\n      amazon: 'www.amazon.com',\n      developer: 'cognito-identity.amazonaws.com'\n    }; // Use custom provider url instead of the predefined ones\n\n    var domain = domains[provider] || provider;\n\n    if (!domain) {\n      return Promise.reject('You must specify a federated provider');\n    }\n\n    var logins = {};\n    logins[domain] = token;\n    var _a = this._config,\n        identityPoolId = _a.identityPoolId,\n        region = _a.region;\n\n    if (!identityPoolId) {\n      logger.debug('No Cognito Federated Identity pool provided');\n      return Promise.reject('No Cognito Federated Identity pool provided');\n    }\n\n    var credentials = new AWS.CognitoIdentityCredentials({\n      IdentityPoolId: identityPoolId,\n      IdentityId: identity_id,\n      Logins: logins\n    }, {\n      region: region\n    });\n    return this._loadCredentials(credentials, 'federated', true, params);\n  };\n\n  Credentials.prototype._setCredentialsFromSession = function (session) {\n    logger.debug('set credentials from session');\n    var idToken = session.getIdToken().getJwtToken();\n    var _a = this._config,\n        region = _a.region,\n        userPoolId = _a.userPoolId,\n        identityPoolId = _a.identityPoolId;\n\n    if (!identityPoolId) {\n      logger.debug('No Cognito Federated Identity pool provided');\n      return Promise.reject('No Cognito Federated Identity pool provided');\n    }\n\n    var key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;\n    var logins = {};\n    logins[key] = idToken;\n    var credentials = new AWS.CognitoIdentityCredentials({\n      IdentityPoolId: identityPoolId,\n      Logins: logins\n    }, {\n      region: region\n    });\n    return this._loadCredentials(credentials, 'userPool', true, null);\n  };\n\n  Credentials.prototype._loadCredentials = function (credentials, source, authenticated, info) {\n    var _this = this;\n\n    var that = this;\n    var identityPoolId = this._config.identityPoolId;\n    return new Promise(function (res, rej) {\n      credentials.get(function (err) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var user, provider, token, expires_at, identity_id, e_2;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (err) {\n                  logger.debug('Failed to load credentials', credentials);\n                  rej(err);\n                  return [2\n                  /*return*/\n                  ];\n                }\n\n                logger.debug('Load credentials successfully', credentials);\n                that._credentials = credentials;\n                that._credentials.authenticated = authenticated;\n                that._credentials_source = source;\n                if (!(source === 'federated')) return [3\n                /*break*/\n                , 3];\n                user = Object.assign({\n                  id: this._credentials.identityId\n                }, info.user);\n                provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;\n\n                try {\n                  this._storage.setItem('aws-amplify-federatedInfo', JSON.stringify({\n                    provider: provider,\n                    token: token,\n                    user: user,\n                    expires_at: expires_at,\n                    identity_id: identity_id\n                  }));\n                } catch (e) {\n                  logger.debug('Failed to put federated info into auth storage', e);\n                }\n\n                if (!(Amplify.Cache && typeof Amplify.Cache.setItem === 'function')) return [3\n                /*break*/\n                , 2];\n                return [4\n                /*yield*/\n                , Amplify.Cache.setItem('federatedInfo', {\n                  provider: provider,\n                  token: token,\n                  user: user,\n                  expires_at: expires_at,\n                  identity_id: identity_id\n                }, {\n                  priority: 1\n                })];\n\n              case 1:\n                _a.sent();\n\n                return [3\n                /*break*/\n                , 3];\n\n              case 2:\n                logger.debug('No Cache module registered in Amplify');\n                _a.label = 3;\n\n              case 3:\n                if (!(source === 'guest')) return [3\n                /*break*/\n                , 7];\n                _a.label = 4;\n\n              case 4:\n                _a.trys.push([4, 6,, 7]);\n\n                return [4\n                /*yield*/\n                , this._storageSync];\n\n              case 5:\n                _a.sent();\n\n                this._storage.setItem('CognitoIdentityId-' + identityPoolId, credentials.identityId);\n\n                return [3\n                /*break*/\n                , 7];\n\n              case 6:\n                e_2 = _a.sent();\n                logger.debug('Failed to cache identityId', e_2);\n                return [3\n                /*break*/\n                , 7];\n\n              case 7:\n                res(that._credentials);\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      });\n    });\n  };\n\n  Credentials.prototype.set = function (params, source) {\n    if (source === 'session') {\n      return this._setCredentialsFromSession(params);\n    } else if (source === 'federation') {\n      return this._setCredentialsFromFederation(params);\n    } else if (source === 'guest') {\n      return this._setCredentialsForGuest();\n    } else {\n      logger.debug('no source specified for setting credentials');\n      return Promise.reject('invalid source');\n    }\n  };\n\n  Credentials.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, identityPoolId, region, credentials;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region;\n\n            if (identityPoolId) {\n              credentials = new AWS.CognitoIdentityCredentials({\n                IdentityPoolId: identityPoolId\n              }, {\n                region: region\n              });\n              credentials.clearCachedId();\n            }\n\n            this._credentials = null;\n            this._credentials_source = null;\n\n            this._storage.removeItem('aws-amplify-federatedInfo');\n\n            if (!(Amplify.Cache && typeof Amplify.Cache.setItem === 'function')) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , Amplify.Cache.removeItem('federatedInfo')];\n\n          case 1:\n            _b.sent();\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            logger.debug('No Cache module registered in Amplify');\n            _b.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Compact version of credentials\n   * @param {Object} credentials\n   * @return {Object} - Credentials\n   */\n\n\n  Credentials.prototype.shear = function (credentials) {\n    return {\n      accessKeyId: credentials.accessKeyId,\n      sessionToken: credentials.sessionToken,\n      secretAccessKey: credentials.secretAccessKey,\n      identityId: credentials.identityId,\n      authenticated: credentials.authenticated\n    };\n  };\n\n  return Credentials;\n}();\n\nexport { Credentials };\nvar instance = new Credentials(null);\nexport default instance;","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","StorageHelper","AWS","JS","FacebookOAuth","GoogleOAuth","Amplify","logger","config","configure","_refreshHandlers","refreshGoogleToken","refreshFacebookToken","Credentials","_credentials_source","_config","Object","assign","refreshHandlers","__assign","_storage","storage","getStorage","_storageSync","Promise","resolve","debug","_pickupCredentials","_gettingCredPromise","isPending","credentials","makeQuerablePromise","_setCredentialsFromAWS","_keepAlive","cred","_credentials","_isExpired","Auth","currentUserCredentials","reject","federatedInfo","user","token","expires_at","identity_id","that","Date","getTime","_setCredentialsFromFederation","provider","then","data","catch","e","_this","clear","ts","delta","expireTime","expired","attempted","_a","identityPoolId","region","mandatorySignIn","identityId","undefined","_b","getItem","e_1","CognitoIdentityCredentials","IdentityPoolId","IdentityId","_loadCredentials","res","code","message","removeItem","clearCachedId","newCredentials","params","domains","google","facebook","amazon","developer","domain","logins","Logins","session","idToken","getIdToken","getJwtToken","userPoolId","key","source","authenticated","info","rej","get","err","id","setItem","JSON","stringify","Cache","priority","e_2","_setCredentialsFromSession","_setCredentialsForGuest","accessKeyId","sessionToken","secretAccessKey","instance"],"sourceRoot":"","sources":["../src/Credentials.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}