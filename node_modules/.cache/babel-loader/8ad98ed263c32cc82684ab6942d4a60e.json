{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { isTranslateTextInput, isTextToSpeechInput, isSpeechToTextInput } from '../Predictions';\nimport { AbstractPredictionsProvider } from '.';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('AbstractConvertPredictionsProvider');\n\nvar AbstractConvertPredictionsProvider =\n/** @class */\nfunction (_super) {\n  __extends(AbstractConvertPredictionsProvider, _super);\n\n  function AbstractConvertPredictionsProvider() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  AbstractConvertPredictionsProvider.prototype.getCategory = function () {\n    return 'Convert';\n  };\n\n  AbstractConvertPredictionsProvider.prototype.convert = function (input) {\n    if (isTranslateTextInput(input)) {\n      logger.debug('translateText');\n      return this.translateText(input);\n    } else if (isTextToSpeechInput(input)) {\n      logger.debug('textToSpeech');\n      return this.convertTextToSpeech(input);\n    } else if (isSpeechToTextInput(input)) {\n      logger.debug('textToSpeech');\n      return this.convertSpeechToText(input);\n    }\n  };\n\n  AbstractConvertPredictionsProvider.prototype.translateText = function (translateTextInput) {\n    throw new Error('convertText is not implemented by this provider');\n  };\n\n  AbstractConvertPredictionsProvider.prototype.convertTextToSpeech = function (textToSpeechInput) {\n    throw new Error('convertTextToSpeech is not implemented by this provider');\n  };\n\n  AbstractConvertPredictionsProvider.prototype.convertSpeechToText = function (speechToTextInput) {\n    throw new Error('convertSpeechToText is not implemented by this provider');\n  };\n\n  return AbstractConvertPredictionsProvider;\n}(AbstractPredictionsProvider);\n\nexport { AbstractConvertPredictionsProvider };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAICA,oBAJD,EAKCC,mBALD,EAMCC,mBAND,QAUO,gBAVP;AAWA,SAASC,2BAAT,QAA4C,GAA5C;AACA,SAASC,aAAa,IAAIC,MAA1B,QAAwC,mBAAxC;AACA,IAAMC,MAAM,GAAG,IAAID,MAAJ,CAAW,oCAAX,CAAf;;AAEA;AAAA;AAAA;AAAiEE;;AAAjE;;AAqCC;;AApCAC;AACC,WAAO,SAAP;AACA,GAFD;;AAIAA,mEACCC,KADD,EACkE;AAEjE,QAAIT,oBAAoB,CAACS,KAAD,CAAxB,EAAiC;AAChCH,YAAM,CAACI,KAAP,CAAa,eAAb;AACA,aAAO,KAAKC,aAAL,CAAmBF,KAAnB,CAAP;AACA,KAHD,MAGO,IAAIR,mBAAmB,CAACQ,KAAD,CAAvB,EAAgC;AACtCH,YAAM,CAACI,KAAP,CAAa,cAAb;AACA,aAAO,KAAKE,mBAAL,CAAyBH,KAAzB,CAAP;AACA,KAHM,MAGA,IAAIP,mBAAmB,CAACO,KAAD,CAAvB,EAAgC;AACtCH,YAAM,CAACI,KAAP,CAAa,cAAb;AACA,aAAO,KAAKG,mBAAL,CAAyBJ,KAAzB,CAAP;AACA;AACD,GAbD;;AAeUD,+DAAV,UACCM,kBADD,EACuC;AAEtC,UAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;AACA,GAJS;;AAMAP,qEAAV,UACCQ,iBADD,EACqC;AAEpC,UAAM,IAAID,KAAJ,CAAU,yDAAV,CAAN;AACA,GAJS;;AAMAP,qEAAV,UACCS,iBADD,EACqC;AAEpC,UAAM,IAAIF,KAAJ,CAAU,yDAAV,CAAN;AACA,GAJS;;AAKX;AArCA,EAAiEZ,2BAAjE","names":["isTranslateTextInput","isTextToSpeechInput","isSpeechToTextInput","AbstractPredictionsProvider","ConsoleLogger","Logger","logger","__extends","AbstractConvertPredictionsProvider","input","debug","translateText","convertTextToSpeech","convertSpeechToText","translateTextInput","Error","textToSpeechInput","speechToTextInput"],"sourceRoot":"","sources":["../../../src/types/Providers/AbstractConvertPredictionsProvider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}