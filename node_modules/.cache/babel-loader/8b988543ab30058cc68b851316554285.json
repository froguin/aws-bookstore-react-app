{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { Credentials } from '@aws-amplify/core';\nimport Storage from '@aws-amplify/storage';\nimport { AbstractIdentifyPredictionsProvider } from '../types/Providers';\nimport * as Rekognition from 'aws-sdk/clients/rekognition';\nimport { isStorageSource, isFileSource, isBytesSource, isIdentifyCelebrities, isIdentifyFromCollection } from '../types';\nimport * as Textract from 'aws-sdk/clients/textract';\nimport { makeCamelCase, makeCamelCaseArray, blobToArrayBuffer } from './Utils';\nimport { categorizeRekognitionBlocks, categorizeTextractBlocks } from './IdentifyTextUtils';\n\nvar AmazonAIIdentifyPredictionsProvider =\n/** @class */\nfunction (_super) {\n  __extends(AmazonAIIdentifyPredictionsProvider, _super);\n\n  function AmazonAIIdentifyPredictionsProvider() {\n    return _super.call(this) || this;\n  }\n\n  AmazonAIIdentifyPredictionsProvider.prototype.getProviderName = function () {\n    return 'AmazonAIIdentifyPredictionsProvider';\n  };\n  /**\n   * Verify user input source and converts it into source object readable by Rekognition and Textract.\n   * Note that Rekognition and Textract use the same source interface, so we need not worry about types.\n   * @param {IdentifySource} source - User input source that directs to the object user wants\n   * to identify (storage, file, or bytes).\n   * @return {Promise<Rekognition.Image>} - Promise resolving to the converted source object.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.configureSource = function (source) {\n    return new Promise(function (res, rej) {\n      if (isStorageSource(source)) {\n        var storageConfig = {\n          level: source.level,\n          identityId: source.identityId\n        };\n        Storage.get(source.key, storageConfig).then(function (url) {\n          var parser = /https:\\/\\/([a-zA-Z0-9%-_.]+)\\.s3\\.[A-Za-z0-9%-._~]+\\/([a-zA-Z0-9%-._~/]+)\\?/;\n          var parsedURL = url.match(parser);\n          if (parsedURL.length < 3) rej('Invalid S3 key was given.');\n          res({\n            S3Object: {\n              Bucket: parsedURL[1],\n              Name: parsedURL[2]\n            }\n          });\n        }).catch(function (err) {\n          return rej(err);\n        });\n      } else if (isFileSource(source)) {\n        blobToArrayBuffer(source.file).then(function (buffer) {\n          res({\n            Bytes: buffer\n          });\n        }).catch(function (err) {\n          return rej(err);\n        });\n      } else if (isBytesSource(source)) {\n        var bytes = source.bytes;\n\n        if (bytes instanceof Blob) {\n          blobToArrayBuffer(bytes).then(function (buffer) {\n            res({\n              Bytes: buffer\n            });\n          }).catch(function (err) {\n            return rej(err);\n          });\n        } // everything else can be directly passed to Rekognition / Textract.\n\n\n        res({\n          Bytes: bytes\n        });\n      } else {\n        rej('Input source is not configured correctly.');\n      }\n    });\n  };\n  /**\n   * Recognize text from real-world images and documents (plain text, forms and tables). Detects text in the input\n   * image and converts it into machine-readable text.\n   * @param {IdentifySource} source - Object containing the source image and feature types to analyze.\n   * @return {Promise<IdentifyTextOutput>} - Promise resolving to object containing identified texts.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.identifyText = function (input) {\n    var _this = this;\n\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, _a, _b, _c, region, _d, _e, configFormat, inputDocument, format, featureTypes, textractParam_1, rekognitionParam, param;\n\n        var _this = this;\n\n        return __generator(this, function (_f) {\n          switch (_f.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , Credentials.get()];\n\n            case 1:\n              credentials = _f.sent();\n              if (!credentials) return [2\n              /*return*/\n              , rej('No credentials')];\n              _a = this._config.identifyText, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).format, configFormat = _e === void 0 ? 'PLAIN' : _e;\n              this.rekognition = new Rekognition({\n                region: region,\n                credentials: credentials\n              });\n              this.textract = new Textract({\n                region: region,\n                credentials: credentials\n              });\n              return [4\n              /*yield*/\n              , this.configureSource(input.text.source).then(function (data) {\n                return inputDocument = data;\n              }).catch(function (err) {\n                rej(err);\n              })];\n\n            case 2:\n              _f.sent();\n\n              format = input.text.format || configFormat;\n              featureTypes = [];\n              if (format === 'FORM' || format === 'ALL') featureTypes.push('FORMS');\n              if (format === 'TABLE' || format === 'ALL') featureTypes.push('TABLES');\n\n              if (featureTypes.length === 0) {\n                textractParam_1 = {\n                  Document: inputDocument\n                };\n                rekognitionParam = {\n                  Image: inputDocument\n                };\n                this.rekognition.detectText(rekognitionParam, function (rekognitionErr, rekognitionData) {\n                  if (rekognitionErr) return rej(rekognitionErr);\n                  var rekognitionResponse = categorizeRekognitionBlocks(rekognitionData.TextDetections);\n\n                  if (rekognitionResponse.text.words.length < 50) {\n                    // did not hit the word limit, return the data\n                    return res(rekognitionResponse);\n                  }\n\n                  _this.textract.detectDocumentText(textractParam_1, function (textractErr, textractData) {\n                    if (textractErr) return rej(textractErr); // use the service that identified more texts.\n\n                    if (rekognitionData.TextDetections.length > textractData.Blocks.length) {\n                      return res(rekognitionResponse);\n                    } else {\n                      return res(categorizeTextractBlocks(textractData.Blocks));\n                    }\n                  });\n                });\n              } else {\n                param = {\n                  Document: inputDocument,\n                  FeatureTypes: featureTypes\n                };\n                this.textract.analyzeDocument(param, function (err, data) {\n                  if (err) return rej(err);\n                  var blocks = data.Blocks;\n                  res(categorizeTextractBlocks(blocks));\n                });\n              }\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n  /**\n   * Identify instances of real world entities from an image and if it contains unsafe content.\n   * @param {IdentifyLabelsInput} input - Object containing the source image and entity type to identify.\n   * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to an array of identified entities.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.identifyLabels = function (input) {\n    var _this = this;\n\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, _a, _b, _c, region, _d, _e, type, inputImage, param, servicePromises, entityType;\n\n        return __generator(this, function (_f) {\n          switch (_f.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , Credentials.get()];\n\n            case 1:\n              credentials = _f.sent();\n              if (!credentials) return [2\n              /*return*/\n              , rej('No credentials')];\n              _a = this._config.identifyLabels, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).type, type = _e === void 0 ? 'LABELS' : _e;\n              this.rekognition = new Rekognition({\n                region: region,\n                credentials: credentials\n              });\n              return [4\n              /*yield*/\n              , this.configureSource(input.labels.source).then(function (data) {\n                inputImage = data;\n              }).catch(function (err) {\n                return rej(err);\n              })];\n\n            case 2:\n              _f.sent();\n\n              param = {\n                Image: inputImage\n              };\n              servicePromises = [];\n              entityType = input.labels.type || type;\n\n              if (entityType === 'LABELS' || entityType === 'ALL') {\n                servicePromises.push(this.detectLabels(param));\n              }\n\n              if (entityType === 'UNSAFE' || entityType === 'ALL') {\n                servicePromises.push(this.detectModerationLabels(param));\n              } // if (servicePromises.length === 0) {\n              //     rej('You must specify entity type: LABELS | UNSAFE | ALL');\n              // }\n\n\n              Promise.all(servicePromises).then(function (data) {\n                var identifyResult = {}; // concatenate resolved promises to a single object\n\n                data.forEach(function (val) {\n                  identifyResult = __assign(__assign({}, identifyResult), val);\n                });\n                res(identifyResult);\n              }).catch(function (err) {\n                return rej(err);\n              });\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n  /**\n   * Calls Rekognition.detectLabels and organizes the returned data.\n   * @param {Rekognition.DetectLabelsRequest} param - parameter to be passed onto Rekognition\n   * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectLabels response.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.detectLabels = function (param) {\n    var _this = this;\n\n    return new Promise(function (res, rej) {\n      _this.rekognition.detectLabels(param, function (err, data) {\n        if (err) return rej(err);\n        if (!data.Labels) return res({\n          labels: null\n        }); // no image was detected\n\n        var detectLabelData = data.Labels.map(function (val) {\n          var boxes = val.Instances ? val.Instances.map(function (val) {\n            return makeCamelCase(val.BoundingBox);\n          }) : undefined;\n          return {\n            name: val.Name,\n            boundingBoxes: boxes,\n            metadata: {\n              confidence: val.Confidence,\n              parents: makeCamelCaseArray(val.Parents)\n            }\n          };\n        });\n        return res({\n          labels: detectLabelData\n        });\n      });\n    });\n  };\n  /**\n   * Calls Rekognition.detectModerationLabels and organizes the returned data.\n   * @param {Rekognition.DetectLabelsRequest} param - Parameter to be passed onto Rekognition\n   * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectModerationLabels response.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.detectModerationLabels = function (param) {\n    var _this = this;\n\n    return new Promise(function (res, rej) {\n      _this.rekognition.detectModerationLabels(param, function (err, data) {\n        if (err) return rej(err);\n\n        if (data.ModerationLabels.length !== 0) {\n          return res({\n            unsafe: 'YES'\n          });\n        } else {\n          return res({\n            unsafe: 'NO'\n          });\n        }\n      });\n    });\n  };\n  /**\n   * Identify faces within an image that is provided as input, and match faces from a collection\n   * or identify celebrities.\n   * @param {IdentifyEntityInput} input - object containing the source image and face match options.\n   * @return {Promise<IdentifyEntityOutput>} Promise resolving to identify results.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.identifyEntities = function (input) {\n    var _this = this;\n\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, _a, _b, _c, region, _d, celebrityDetectionEnabled, _e, _f, _g, collectionIdConfig, _h, maxFacesConfig, inputImage, param, _j, _k, collectionId, _l, maxFaces, updatedParam;\n\n        var _this = this;\n\n        return __generator(this, function (_m) {\n          switch (_m.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , Credentials.get()];\n\n            case 1:\n              credentials = _m.sent();\n              if (!credentials) return [2\n              /*return*/\n              , rej('No credentials')];\n              _a = this._config.identifyEntities, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.celebrityDetectionEnabled, celebrityDetectionEnabled = _d === void 0 ? false : _d, _e = _b.defaults, _f = _e === void 0 ? {} : _e, _g = _f.collectionId, collectionIdConfig = _g === void 0 ? '' : _g, _h = _f.maxEntities, maxFacesConfig = _h === void 0 ? 50 : _h; // default arguments\n\n              this.rekognition = new Rekognition({\n                region: region,\n                credentials: credentials\n              });\n              return [4\n              /*yield*/\n              , this.configureSource(input.entities.source).then(function (data) {\n                return inputImage = data;\n              }).catch(function (err) {\n                return rej(err);\n              })];\n\n            case 2:\n              _m.sent();\n\n              param = {\n                Image: inputImage\n              };\n\n              if (isIdentifyCelebrities(input.entities) && input.entities.celebrityDetection) {\n                if (!celebrityDetectionEnabled) {\n                  return [2\n                  /*return*/\n                  , rej('Error: You have to enable celebrity detection first')];\n                }\n\n                this.rekognition.recognizeCelebrities(param, function (err, data) {\n                  if (err) return rej(err);\n                  var faces = data.CelebrityFaces.map(function (celebrity) {\n                    return {\n                      boundingBox: makeCamelCase(celebrity.Face.BoundingBox),\n                      landmarks: makeCamelCaseArray(celebrity.Face.Landmarks),\n                      metadata: __assign(__assign({}, makeCamelCase(celebrity, ['Id', 'Name', 'Urls'])), {\n                        pose: makeCamelCase(celebrity.Face.Pose)\n                      })\n                    };\n                  });\n                  res({\n                    entities: faces\n                  });\n                });\n              } else if (isIdentifyFromCollection(input.entities) && input.entities.collection) {\n                _j = input.entities, _k = _j.collectionId, collectionId = _k === void 0 ? collectionIdConfig : _k, _l = _j.maxEntities, maxFaces = _l === void 0 ? maxFacesConfig : _l;\n                updatedParam = __assign(__assign({}, param), {\n                  CollectionId: collectionId,\n                  MaxFaces: maxFaces\n                });\n                this.rekognition.searchFacesByImage(updatedParam, function (err, data) {\n                  if (err) return rej(err);\n                  var faces = data.FaceMatches.map(function (val) {\n                    return {\n                      boundingBox: makeCamelCase(val.Face.BoundingBox),\n                      metadata: {\n                        externalImageId: _this.decodeExternalImageId(val.Face.ExternalImageId),\n                        similarity: val.Similarity\n                      }\n                    };\n                  });\n                  res({\n                    entities: faces\n                  });\n                });\n              } else {\n                this.rekognition.detectFaces(param, function (err, data) {\n                  if (err) return rej(err);\n                  var faces = data.FaceDetails.map(function (detail) {\n                    // face attributes keys we want to extract from Rekognition's response\n                    var attributeKeys = ['Smile', 'Eyeglasses', 'Sunglasses', 'Gender', 'Beard', 'Mustache', 'EyesOpen', 'MouthOpen'];\n                    var faceAttributes = makeCamelCase(detail, attributeKeys);\n\n                    if (detail.Emotions) {\n                      faceAttributes['emotions'] = detail.Emotions.map(function (emotion) {\n                        return emotion.Type;\n                      });\n                    }\n\n                    return {\n                      boundingBox: makeCamelCase(detail.BoundingBox),\n                      landmarks: makeCamelCaseArray(detail.Landmarks),\n                      ageRange: makeCamelCase(detail.AgeRange),\n                      attributes: makeCamelCase(detail, attributeKeys),\n                      metadata: {\n                        confidence: detail.Confidence,\n                        pose: makeCamelCase(detail.Pose)\n                      }\n                    };\n                  });\n                  res({\n                    entities: faces\n                  });\n                });\n              }\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  AmazonAIIdentifyPredictionsProvider.prototype.decodeExternalImageId = function (externalImageId) {\n    return ('' + externalImageId).replace(/::/g, '/');\n  };\n\n  return AmazonAIIdentifyPredictionsProvider;\n}(AbstractIdentifyPredictionsProvider);\n\nexport default AmazonAIIdentifyPredictionsProvider;","map":{"version":3,"mappings":"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","names":["Credentials","Storage","AbstractIdentifyPredictionsProvider","Rekognition","isStorageSource","isFileSource","isBytesSource","isIdentifyCelebrities","isIdentifyFromCollection","Textract","makeCamelCase","makeCamelCaseArray","blobToArrayBuffer","categorizeRekognitionBlocks","categorizeTextractBlocks","__extends","_super","AmazonAIIdentifyPredictionsProvider","source","Promise","res","rej","storageConfig","level","identityId","get","key","then","url","parser","parsedURL","match","length","S3Object","Bucket","Name","catch","err","file","Bytes","buffer","bytes","Blob","input","credentials","_f","_a","_config","identifyText","_c","region","_d","_e","format","configFormat","rekognition","textract","configureSource","text","inputDocument","data","featureTypes","push","textractParam_1","Document","rekognitionParam","Image","detectText","rekognitionErr","rekognitionData","rekognitionResponse","TextDetections","words","_this","detectDocumentText","textractErr","textractData","Blocks","param","FeatureTypes","analyzeDocument","blocks","identifyLabels","type","labels","inputImage","servicePromises","entityType","detectLabels","detectModerationLabels","all","identifyResult","forEach","val","Labels","detectLabelData","map","boxes","Instances","BoundingBox","undefined","name","boundingBoxes","metadata","confidence","Confidence","parents","Parents","ModerationLabels","unsafe","_m","identifyEntities","celebrityDetectionEnabled","_g","collectionIdConfig","_h","maxFacesConfig","entities","celebrityDetection","recognizeCelebrities","faces","CelebrityFaces","boundingBox","celebrity","Face","landmarks","Landmarks","pose","Pose","collection","_j","_k","collectionId","_l","maxFaces","updatedParam","CollectionId","MaxFaces","searchFacesByImage","FaceMatches","externalImageId","decodeExternalImageId","ExternalImageId","similarity","Similarity","detectFaces","FaceDetails","attributeKeys","faceAttributes","detail","Emotions","Type","ageRange","AgeRange","attributes","replace"],"sourceRoot":"","sources":["../../src/Providers/AmazonAIIdentifyPredictionsProvider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}