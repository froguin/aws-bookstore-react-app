{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar HeaderMarshaller_1 = require(\"./HeaderMarshaller\");\n\nvar splitMessage_1 = require(\"./splitMessage\");\n\nvar crc32_1 = require(\"@aws-crypto/crc32\");\n/**\n * A marshaller that can convert binary-packed event stream messages into\n * JavaScript objects and back again into their binary format.\n */\n\n\nvar EventStreamMarshaller =\n/** @class */\nfunction () {\n  function EventStreamMarshaller(toUtf8, fromUtf8) {\n    this.headerMarshaller = new HeaderMarshaller_1.HeaderMarshaller(toUtf8, fromUtf8);\n  }\n  /**\n   * Convert a structured JavaScript object with tagged headers into a binary\n   * event stream message.\n   */\n\n\n  EventStreamMarshaller.prototype.marshall = function (_a) {\n    var rawHeaders = _a.headers,\n        body = _a.body;\n    var headers = this.headerMarshaller.format(rawHeaders);\n    var length = headers.byteLength + body.byteLength + 16;\n    var out = new Uint8Array(length);\n    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    var checksum = new crc32_1.Crc32(); // Format message\n\n    view.setUint32(0, length, false);\n    view.setUint32(4, headers.byteLength, false);\n    view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);\n    out.set(headers, 12);\n    out.set(body, headers.byteLength + 12); // Write trailing message checksum\n\n    view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);\n    return out;\n  };\n  /**\n   * Convert a binary event stream message into a JavaScript object with an\n   * opaque, binary body and tagged, parsed headers.\n   */\n\n\n  EventStreamMarshaller.prototype.unmarshall = function (message) {\n    var _a = splitMessage_1.splitMessage(message),\n        headers = _a.headers,\n        body = _a.body;\n\n    return {\n      headers: this.headerMarshaller.parse(headers),\n      body: body\n    };\n  };\n\n  return EventStreamMarshaller;\n}();\n\nexports.EventStreamMarshaller = EventStreamMarshaller;","map":{"version":3,"mappings":";;;;;;AAAA;;AAEA;;AACA;AAIA;;;;;;AAIA;AAAA;AAAA;AAGI,iCAAYA,MAAZ,EAA6BC,QAA7B,EAA8C;AAC1C,SAAKC,gBAAL,GAAwB,IAAIC,mCAAJ,CAAqBH,MAArB,EAA6BC,QAA7B,CAAxB;AACH;AAED;;;;;;AAIAG,uDAASC,EAAT,EAA+C;QAApCC;QAAqBC;AAC5B,QAAMC,OAAO,GAAG,KAAKN,gBAAL,CAAsBO,MAAtB,CAA6BH,UAA7B,CAAhB;AACA,QAAMI,MAAM,GAAGF,OAAO,CAACG,UAAR,GAAqBJ,IAAI,CAACI,UAA1B,GAAuC,EAAtD;AAEA,QAAMC,GAAG,GAAG,IAAIC,UAAJ,CAAeH,MAAf,CAAZ;AACA,QAAMI,IAAI,GAAG,IAAIC,QAAJ,CAAaH,GAAG,CAACI,MAAjB,EAAyBJ,GAAG,CAACK,UAA7B,EAAyCL,GAAG,CAACD,UAA7C,CAAb;AACA,QAAMO,QAAQ,GAAG,IAAIC,aAAJ,EAAjB,CAN2C,CAQ3C;;AACAL,QAAI,CAACM,SAAL,CAAe,CAAf,EAAkBV,MAAlB,EAA0B,KAA1B;AACAI,QAAI,CAACM,SAAL,CAAe,CAAf,EAAkBZ,OAAO,CAACG,UAA1B,EAAsC,KAAtC;AACAG,QAAI,CAACM,SAAL,CAAe,CAAf,EAAkBF,QAAQ,CAACG,MAAT,CAAgBT,GAAG,CAACU,QAAJ,CAAa,CAAb,EAAgB,CAAhB,CAAhB,EAAoCC,MAApC,EAAlB,EAAgE,KAAhE;AACAX,OAAG,CAACY,GAAJ,CAAQhB,OAAR,EAAiB,EAAjB;AACAI,OAAG,CAACY,GAAJ,CAAQjB,IAAR,EAAcC,OAAO,CAACG,UAAR,GAAqB,EAAnC,EAb2C,CAe3C;;AACAG,QAAI,CAACM,SAAL,CACIV,MAAM,GAAG,CADb,EAEIQ,QAAQ,CAACG,MAAT,CAAgBT,GAAG,CAACU,QAAJ,CAAa,CAAb,EAAgBZ,MAAM,GAAG,CAAzB,CAAhB,EAA6Ca,MAA7C,EAFJ,EAGI,KAHJ;AAMA,WAAOX,GAAP;AACH,GAvBD;AAyBA;;;;;;AAIAR,yDAAWqB,OAAX,EAAmC;AACzB;AAAA,QAAEjB,oBAAF;AAAA,QAAWD,cAAX;;AAEN,WAAO;AAAEC,aAAO,EAAE,KAAKN,gBAAL,CAAsBwB,KAAtB,CAA4BlB,OAA5B,CAAX;AAAiDD,UAAI;AAArD,KAAP;AACH,GAJD;;AAKJ;AAAC,CA7CD;;AAAaoB","names":["toUtf8","fromUtf8","headerMarshaller","HeaderMarshaller_1","EventStreamMarshaller","_a","rawHeaders","body","headers","format","length","byteLength","out","Uint8Array","view","DataView","buffer","byteOffset","checksum","crc32_1","setUint32","update","subarray","digest","set","message","parse","exports"],"sourceRoot":"","sources":["../src/EventStreamMarshaller.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}