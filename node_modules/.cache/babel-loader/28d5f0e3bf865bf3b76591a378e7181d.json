{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { CacheList, defaultConfig, getCurrTime, CacheObject } from './Utils';\nimport StorageCache from './StorageCache';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('InMemoryCache');\n/**\n * Customized in-memory cache with LRU implemented\n * @member cacheObj - object which store items\n * @member cacheList - list of keys in the cache with LRU\n * @member curSizeInBytes - current size of the cache\n * @member maxPriority - max of the priority\n * @member cacheSizeLimit - the limit of cache size\n */\n\nvar InMemoryCache =\n/** @class */\nfunction (_super) {\n  __extends(InMemoryCache, _super);\n  /**\n   * initialize the cache\n   *\n   * @param config - the configuration of the cache\n   */\n\n\n  function InMemoryCache(config) {\n    var _this = this;\n\n    var cacheConfig = config ? Object.assign({}, defaultConfig, config) : defaultConfig;\n    _this = _super.call(this, cacheConfig) || this;\n    logger.debug('now we start!');\n    _this.cacheList = [];\n    _this.curSizeInBytes = 0;\n    _this.maxPriority = 5;\n    _this.getItem = _this.getItem.bind(_this);\n    _this.setItem = _this.setItem.bind(_this);\n    _this.removeItem = _this.removeItem.bind(_this); // initialize list for every priority\n\n    for (var i = 0; i < _this.maxPriority; i += 1) {\n      _this.cacheList[i] = new CacheList();\n    }\n\n    return _this;\n  }\n  /**\n   * decrease current size of the cache\n   *\n   * @param amount - the amount of the cache size which needs to be decreased\n   */\n\n\n  InMemoryCache.prototype._decreaseCurSizeInBytes = function (amount) {\n    this.curSizeInBytes -= amount;\n  };\n  /**\n   * increase current size of the cache\n   *\n   * @param amount - the amount of the cache szie which need to be increased\n   */\n\n\n  InMemoryCache.prototype._increaseCurSizeInBytes = function (amount) {\n    this.curSizeInBytes += amount;\n  };\n  /**\n   * check whether item is expired\n   *\n   * @param key - the key of the item\n   *\n   * @return true if the item is expired.\n   */\n\n\n  InMemoryCache.prototype._isExpired = function (key) {\n    var text = CacheObject.getItem(key);\n    var item = JSON.parse(text);\n\n    if (getCurrTime() >= item.expires) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * delete item from cache\n   *\n   * @param prefixedKey - the key of the item\n   * @param listIdx - indicates which cache list the key belongs to\n   */\n\n\n  InMemoryCache.prototype._removeItem = function (prefixedKey, listIdx) {\n    // delete the key from the list\n    this.cacheList[listIdx].removeItem(prefixedKey); // decrease the current size of the cache\n\n    this._decreaseCurSizeInBytes(JSON.parse(CacheObject.getItem(prefixedKey)).byteSize); // finally remove the item from memory\n\n\n    CacheObject.removeItem(prefixedKey);\n  };\n  /**\n   * put item into cache\n   *\n   * @param prefixedKey - the key of the item\n   * @param itemData - the value of the item\n   * @param itemSizeInBytes - the byte size of the item\n   * @param listIdx - indicates which cache list the key belongs to\n   */\n\n\n  InMemoryCache.prototype._setItem = function (prefixedKey, item, listIdx) {\n    // insert the key into the list\n    this.cacheList[listIdx].insertItem(prefixedKey); // increase the current size of the cache\n\n    this._increaseCurSizeInBytes(item.byteSize); // finally add the item into memory\n\n\n    CacheObject.setItem(prefixedKey, JSON.stringify(item));\n  };\n  /**\n   * see whether cache is full\n   *\n   * @param itemSize\n   *\n   * @return true if cache is full\n   */\n\n\n  InMemoryCache.prototype._isCacheFull = function (itemSize) {\n    return this.curSizeInBytes + itemSize > this.config.capacityInBytes;\n  };\n  /**\n   * check whether the cache contains the key\n   *\n   * @param key\n   */\n\n\n  InMemoryCache.prototype.containsKey = function (key) {\n    var prefixedKey = this.config.keyPrefix + key;\n\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      if (this.cacheList[i].containsKey(prefixedKey)) {\n        return i + 1;\n      }\n    }\n\n    return -1;\n  };\n  /**\n   * * Set item into cache. You can put number, string, boolean or object.\n   * The cache will first check whether has the same key.\n   * If it has, it will delete the old item and then put the new item in\n   * The cache will pop out items if it is full\n   * You can specify the cache item options. The cache will abort and output a warning:\n   * If the key is invalid\n   * If the size of the item exceeds itemMaxSize.\n   * If the value is undefined\n   * If incorrect cache item configuration\n   * If error happened with browser storage\n   *\n   * @param key - the key of the item\n   * @param value - the value of the item\n   * @param options - optional, the specified meta-data\n   *\n   * @throws if the item is too big which exceeds the limit of single item size\n   * @throws if the key is invalid\n   */\n\n\n  InMemoryCache.prototype.setItem = function (key, value, options) {\n    var prefixedKey = this.config.keyPrefix + key; // invalid keys\n\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n      return;\n    }\n\n    if (typeof value === 'undefined') {\n      logger.warn(\"The value of item should not be undefined!\");\n      return;\n    }\n\n    var cacheItemOptions = {\n      priority: options && options.priority !== undefined ? options.priority : this.config.defaultPriority,\n      expires: options && options.expires !== undefined ? options.expires : this.config.defaultTTL + getCurrTime()\n    };\n\n    if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\n      logger.warn(\"Invalid parameter: priority due to out or range. It should be within 1 and 5.\");\n      return;\n    }\n\n    var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions); // check wether this item is too big;\n\n    if (item.byteSize > this.config.itemMaxSize) {\n      logger.warn(\"Item with key: \" + key + \" you are trying to put into is too big!\");\n      return;\n    } // if key already in the cache, then delete it.\n\n\n    var presentKeyPrio = this.containsKey(key);\n\n    if (presentKeyPrio !== -1) {\n      this._removeItem(prefixedKey, presentKeyPrio - 1);\n    } // pop out items in the cache when cache is full based on LRU\n    // first start from lowest priority cache list\n\n\n    var cacheListIdx = this.maxPriority - 1;\n\n    while (this._isCacheFull(item.byteSize) && cacheListIdx >= 0) {\n      if (!this.cacheList[cacheListIdx].isEmpty()) {\n        var popedItemKey = this.cacheList[cacheListIdx].getLastItem();\n\n        this._removeItem(popedItemKey, cacheListIdx);\n      } else {\n        cacheListIdx -= 1;\n      }\n    }\n\n    this._setItem(prefixedKey, item, Number(item.priority) - 1);\n  };\n  /**\n   * Get item from cache. It will return null if item doesnâ€™t exist or it has been expired.\n   * If you specified callback function in the options,\n   * then the function will be executed if no such item in the cache\n   * and finally put the return value into cache.\n   * Please make sure the callback function will return the value you want to put into the cache.\n   * The cache will abort output a warning:\n   * If the key is invalid\n   *\n   * @param key - the key of the item\n   * @param options - the options of callback function\n   */\n\n\n  InMemoryCache.prototype.getItem = function (key, options) {\n    var ret = null;\n    var prefixedKey = this.config.keyPrefix + key;\n\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n      return null;\n    } // check whether it's in the cachelist\n\n\n    var presentKeyPrio = this.containsKey(key);\n\n    if (presentKeyPrio !== -1) {\n      if (this._isExpired(prefixedKey)) {\n        // if expired, remove that item and return null\n        this._removeItem(prefixedKey, presentKeyPrio - 1);\n      } else {\n        // if not expired, great, return the value and refresh it\n        ret = CacheObject.getItem(prefixedKey);\n        var item = JSON.parse(ret);\n        this.cacheList[item.priority - 1].refresh(prefixedKey);\n        return item.data;\n      }\n    }\n\n    if (options && options.callback !== undefined) {\n      var val = options.callback();\n\n      if (val !== null) {\n        this.setItem(key, val, options);\n      }\n\n      return val;\n    }\n\n    return null;\n  };\n  /**\n   * remove item from the cache\n   *\n   * @param key - the key of the item\n   */\n\n\n  InMemoryCache.prototype.removeItem = function (key) {\n    var prefixedKey = this.config.keyPrefix + key; // check if the key is in the cache\n\n    var presentKeyPrio = this.containsKey(key);\n\n    if (presentKeyPrio !== -1) {\n      this._removeItem(prefixedKey, presentKeyPrio - 1);\n    }\n  };\n  /**\n   * clear the entire cache\n   */\n\n\n  InMemoryCache.prototype.clear = function () {\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      for (var _i = 0, _a = this.cacheList[i].getKeys(); _i < _a.length; _i++) {\n        var key = _a[_i];\n\n        this._removeItem(key, i);\n      }\n    }\n  };\n  /**\n   * Return all the keys in the cache.\n   */\n\n\n  InMemoryCache.prototype.getAllKeys = function () {\n    var keys = [];\n\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      for (var _i = 0, _a = this.cacheList[i].getKeys(); _i < _a.length; _i++) {\n        var key = _a[_i];\n        keys.push(key.substring(this.config.keyPrefix.length));\n      }\n    }\n\n    return keys;\n  };\n  /**\n   * return the current size of the cache\n   *\n   * @return the current size of the cache\n   */\n\n\n  InMemoryCache.prototype.getCacheCurSize = function () {\n    return this.curSizeInBytes;\n  };\n  /**\n   * Return a new instance of cache with customized configuration.\n   * @param config - the customized configuration\n   */\n\n\n  InMemoryCache.prototype.createInstance = function (config) {\n    return new InMemoryCache(config);\n  };\n\n  return InMemoryCache;\n}(StorageCache);\n\nexport { InMemoryCache };\nvar instance = new InMemoryCache();\nexport default instance;","map":{"version":3,"mappings":"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","names":["CacheList","defaultConfig","getCurrTime","CacheObject","StorageCache","ConsoleLogger","Logger","logger","__extends","config","cacheConfig","Object","assign","_this","debug","cacheList","curSizeInBytes","maxPriority","getItem","bind","setItem","removeItem","i","InMemoryCache","amount","key","text","item","JSON","parse","expires","prefixedKey","listIdx","_decreaseCurSizeInBytes","byteSize","insertItem","_increaseCurSizeInBytes","stringify","itemSize","capacityInBytes","keyPrefix","containsKey","value","options","cacheCurSizeKey","warn","cacheItemOptions","priority","undefined","defaultPriority","defaultTTL","fillCacheItem","itemMaxSize","presentKeyPrio","_removeItem","cacheListIdx","_isCacheFull","isEmpty","popedItemKey","getLastItem","_setItem","Number","ret","_isExpired","refresh","data","callback","val","getKeys","_i","keys","push","substring","length","instance"],"sourceRoot":"","sources":["../src/InMemoryCache.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}