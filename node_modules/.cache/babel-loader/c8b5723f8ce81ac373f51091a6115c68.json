{"ast":null,"code":"/*\n * Copyright 2019-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { ConsoleLogger as Logger, Credentials, JS } from '@aws-amplify/core';\nimport * as PersonalizeEvents from 'aws-sdk/clients/personalizeevents';\nimport { SessionInfoManager, MediaAutoTrack } from './AmazonPersonalizeHelper';\nimport { isEmpty, isEqual, get } from 'lodash';\nvar logger = new Logger('AmazonPersonalizeProvider'); // events buffer\n\nvar FLUSH_SIZE = 5;\nvar FLUSH_SIZE_THRESHHOLD = 10;\nvar FLUSH_INTERVAL = 5 * 1000; // 5s\n\nvar IDENTIFY_EVENT = 'Identify';\n\nvar AmazonPersonalizeProvider =\n/** @class */\nfunction () {\n  function AmazonPersonalizeProvider(config) {\n    this._buffer = [];\n    this._config = config ? config : {};\n    this._config.flushSize = this._config.flushSize > 0 && this._config.flushSize <= FLUSH_SIZE_THRESHHOLD ? this._config.flushSize : FLUSH_SIZE;\n    this._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n    this._sessionManager = new SessionInfoManager();\n\n    if (!isEmpty(this._config.trackingId)) {\n      this._sessionInfo = this._sessionManager.retrieveSessionInfo(this._config.trackingId);\n    }\n\n    this._isBrowser = JS.browserOrNode().isBrowser; // flush event buffer\n\n    this._setupTimer();\n  }\n\n  AmazonPersonalizeProvider.prototype._setupTimer = function () {\n    if (this._timer) {\n      clearInterval(this._timer);\n    }\n\n    var _a = this._config,\n        flushSize = _a.flushSize,\n        flushInterval = _a.flushInterval;\n    var that = this;\n    this._timer = setInterval(function () {\n      that._sendFromBuffer();\n    }, flushInterval);\n  };\n  /**\n   * Record event\n   * @param eventType      - type of the event action. e.g. \"Click\"\n   * @param properties     - properties of the event\n   * @return Promise\n   */\n\n\n  AmazonPersonalizeProvider.prototype.record = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, eventType, properties, requestParams, isLoaded;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._getCredentials()];\n\n          case 1:\n            credentials = _b.sent();\n            if (!credentials) return [2\n            /*return*/\n            , Promise.resolve(false)];\n            Object.assign(params, {\n              config: this._config,\n              credentials: credentials,\n              sentAt: new Date().getTime() / 1000\n            });\n            _a = params.event, eventType = _a.eventType, properties = _a.properties;\n\n            if (eventType === IDENTIFY_EVENT) {\n              this._sessionManager.updateSessionInfo(properties && properties.userId ? properties.userId : '', this._sessionInfo);\n\n              return [2\n              /*return*/\n              ];\n            } else if (!isEmpty(params.event.userId)) {\n              this._sessionManager.updateSessionInfo(params.event.userId, this._sessionInfo);\n            }\n\n            requestParams = this.generateRequestParams(params, this._sessionInfo);\n            if (!(eventType === 'MediaAutoTrack')) return [3\n            /*break*/\n            , 7];\n            if (!this._isBrowser) return [3\n            /*break*/\n            , 5];\n            if (!!isEmpty(get(requestParams, 'eventData.properties.domElementId', null))) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.isElementFullyLoaded(this.loadElement, requestParams.eventData.properties['domElementId'], 500, 5)];\n\n          case 2:\n            isLoaded = _b.sent();\n\n            if (isLoaded) {\n              new MediaAutoTrack(requestParams, this);\n            } else {\n              logger.debug('Cannot find the media element.');\n            }\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            logger.debug(\"Missing domElementId field in 'properties' for MediaAutoTrack event type.\");\n            _b.label = 4;\n\n          case 4:\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            logger.debug('MediaAutoTrack only for browser');\n            _b.label = 6;\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            , this.putToBuffer(requestParams)];\n        }\n      });\n    });\n  };\n\n  AmazonPersonalizeProvider.prototype.loadElement = function (domId) {\n    return new Promise(function (resolve, reject) {\n      if (document.getElementById(domId) && document.getElementById(domId).clientHeight) {\n        return resolve(true);\n      } else {\n        return reject(true);\n      }\n    });\n  };\n\n  AmazonPersonalizeProvider.prototype.isElementFullyLoaded = function (operation, params, delay, times) {\n    var _this = this;\n\n    var wait = function wait(ms) {\n      return new Promise(function (r) {\n        return setTimeout(r, ms);\n      });\n    };\n\n    return new Promise(function (resolve, reject) {\n      return operation(params).then(resolve).catch(function (reason) {\n        if (times - 1 > 0) {\n          return wait(delay).then(_this.isElementFullyLoaded.bind(null, operation, params, delay, times - 1)).then(resolve).catch(reject);\n        }\n\n        return reject(reason);\n      });\n    });\n  };\n  /**\n   * get the category of the plugin\n   */\n\n\n  AmazonPersonalizeProvider.prototype.getCategory = function () {\n    return 'Analytics';\n  };\n  /**\n   * get provider name of the plugin\n   */\n\n\n  AmazonPersonalizeProvider.prototype.getProviderName = function () {\n    return 'AmazonPersonalize';\n  };\n  /**\n   * configure the plugin\n   * @param {Object} config - configuration\n   */\n\n\n  AmazonPersonalizeProvider.prototype.configure = function (config) {\n    logger.debug('configure Analytics', config);\n    var conf = config ? config : {};\n    this._config = Object.assign({}, this._config, conf);\n\n    if (!isEmpty(this._config.trackingId)) {\n      this._sessionInfo = this._sessionManager.retrieveSessionInfo(this._config.trackingId);\n    }\n\n    this._setupTimer();\n\n    return this._config;\n  };\n  /**\n   * Generate the requestParams from customer input params and sessionInfo\n   * @private\n   * @param eventData      - customer input for event data\n   * @param api            - api name\n   * @return RequestParams - wrapper object with all information required for make request\n   */\n\n\n  AmazonPersonalizeProvider.prototype.generateRequestParams = function (params, sessionInfo) {\n    var requestParams = {};\n    var _a = params.event,\n        eventType = _a.eventType,\n        properties = _a.properties;\n    requestParams.eventData = {\n      eventType: eventType,\n      properties: properties\n    };\n    requestParams.sessionInfo = sessionInfo;\n    requestParams.sentAt = params.sentAt;\n    requestParams.credentials = params.credentials;\n    requestParams.config = params.config;\n    return requestParams;\n  };\n  /**\n   * record an event\n   * @param {Object} params - the params of an event\n   */\n\n\n  AmazonPersonalizeProvider.prototype._sendEvents = function (group) {\n    var groupLen = group.length;\n\n    if (groupLen === 0) {\n      logger.debug('events array is empty, directly return');\n      return;\n    }\n\n    var _a = group[0],\n        config = _a.config,\n        credentials = _a.credentials,\n        sessionInfo = _a.sessionInfo;\n\n    var initClients = this._init(config, credentials);\n\n    if (!initClients) return false;\n\n    if (groupLen > 0) {\n      var events = [];\n\n      for (var i = 0; i < groupLen; i += 1) {\n        var params = group.shift();\n\n        var eventPayload = this._generateSingleRecordPayload(params, sessionInfo);\n\n        events.push(eventPayload);\n      }\n\n      var payload = {};\n      payload.trackingId = sessionInfo.trackingId;\n      payload.sessionId = sessionInfo.sessionId;\n      payload.userId = sessionInfo.userId;\n      payload.eventList = events;\n\n      this._personalize.putEvents(payload, function (err, data) {\n        if (err) logger.debug('Failed to call putEvents in Personalize', err);else logger.debug('Put events');\n      });\n    }\n  };\n  /**\n   * Put event into buffer\n   * @private\n   * @param params - params for the event recording\n   */\n\n\n  AmazonPersonalizeProvider.prototype.putToBuffer = function (params) {\n    if (this._buffer.length < this._config.flushSize) {\n      this._buffer.push(params);\n    } else {\n      this._buffer.push(params);\n\n      this._sendFromBuffer();\n    }\n\n    return Promise.resolve(true);\n  };\n  /**\n   * flush the buffer and batch sending the request\n   * @private\n   * @param eventsParams - the buffer for cache the payload\n   */\n\n\n  AmazonPersonalizeProvider.prototype._sendFromBuffer = function () {\n    var _this = this;\n\n    var size = this._buffer.length;\n    if (size <= 0) return;\n    var eventsGroups = [];\n    var preCred = null;\n    var group = [];\n\n    for (var i = 0; i < size; i += 1) {\n      var currRequestParams = this._buffer.shift();\n\n      var cred = currRequestParams.credentials;\n      var sessionInfo = currRequestParams.sessionInfo;\n\n      if (i === 0) {\n        group.push(currRequestParams);\n        preCred = cred;\n      } else {\n        if (isEqual(sessionInfo, this._sessionInfo) && cred.sessionToken === preCred.sessionToken && cred.identityId === preCred.identityId) {\n          logger.debug('no change for cred, put event in the same group');\n          group.push(currRequestParams);\n        } else {\n          eventsGroups.push(group);\n          group = [];\n          group.push(currRequestParams);\n          preCred = cred;\n          this._sessionInfo = sessionInfo;\n        }\n      }\n    }\n\n    eventsGroups.push(group);\n    eventsGroups.map(function (group) {\n      _this._sendEvents(group);\n    });\n  };\n  /**\n   * Generate the record payload for single event\n   * @private\n   * @param params - RequestParams\n   */\n\n\n  AmazonPersonalizeProvider.prototype._generateSingleRecordPayload = function (params, sessionInfo) {\n    var eventData = params.eventData,\n        sentAt = params.sentAt;\n    var trackPayload = {};\n    trackPayload.sentAt = sentAt;\n    trackPayload.properties = eventData.properties;\n    trackPayload.eventId = this._sessionManager.getTimerKey() + sessionInfo.sessionId;\n    trackPayload.eventType = eventData.eventType;\n    return trackPayload;\n  };\n  /**\n   * Initialize the personalize client\n   * @private\n   * @param params - RequestParams\n   */\n\n\n  AmazonPersonalizeProvider.prototype._init = function (config, credentials) {\n    logger.debug('init clients');\n\n    if (this._personalize && this._config.credentials && this._config.credentials.sessionToken === credentials.sessionToken && this._config.credentials.identityId === credentials.identityId) {\n      logger.debug('no change for analytics config, directly return from init');\n      return true;\n    }\n\n    this._config.credentials = credentials;\n    var region = config.region;\n    logger.debug('initialize personalize with credentials', credentials);\n    this._personalize = new PersonalizeEvents({\n      apiVersion: '2018-03-22',\n      region: region,\n      credentials: credentials\n    });\n    return true;\n  };\n  /**\n   * check if current credentials exists\n   * @private\n   */\n\n\n  AmazonPersonalizeProvider.prototype._getCredentials = function () {\n    var that = this;\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return null;\n      logger.debug('set credentials for analytics', that._config.credentials);\n      return Credentials.shear(credentials);\n    }).catch(function (err) {\n      logger.debug('ensure credentials error', err);\n      return null;\n    });\n  };\n\n  return AmazonPersonalizeProvider;\n}();\n\nexport default AmazonPersonalizeProvider;","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","Credentials","JS","PersonalizeEvents","SessionInfoManager","MediaAutoTrack","isEmpty","isEqual","get","logger","FLUSH_SIZE","FLUSH_SIZE_THRESHHOLD","FLUSH_INTERVAL","IDENTIFY_EVENT","config","_buffer","_config","flushSize","flushInterval","_sessionManager","trackingId","_sessionInfo","retrieveSessionInfo","_isBrowser","browserOrNode","isBrowser","_setupTimer","AmazonPersonalizeProvider","_timer","clearInterval","that","setInterval","_sendFromBuffer","params","_getCredentials","credentials","_b","Promise","resolve","Object","assign","sentAt","Date","getTime","_a","event","eventType","properties","updateSessionInfo","userId","requestParams","generateRequestParams","isElementFullyLoaded","loadElement","eventData","isLoaded","debug","putToBuffer","domId","reject","document","getElementById","clientHeight","operation","delay","times","wait","r","ms","then","catch","_this","bind","reason","conf","sessionInfo","group","groupLen","length","initClients","_init","events","i","shift","eventPayload","_generateSingleRecordPayload","push","payload","sessionId","eventList","_personalize","putEvents","err","data","size","eventsGroups","preCred","currRequestParams","cred","sessionToken","identityId","map","_sendEvents","trackPayload","eventId","getTimerKey","apiVersion","region","shear"],"sourceRoot":"","sources":["../../src/Providers/AmazonPersonalizeProvider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}