{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('Predictions');\n\nvar Predictions =\n/** @class */\nfunction () {\n  /**\n   * Initialize Predictions with AWS configurations\n   * @param {PredictionsOptions} options - Configuration object for Predictions\n   */\n  function Predictions(options) {\n    this._options = options;\n    this._convertPluggables = [];\n    this._identifyPluggables = [];\n    this._interpretPluggables = [];\n  }\n\n  Predictions.prototype.getModuleName = function () {\n    return 'Predictions';\n  };\n  /**\n   * add plugin/pluggable into Predictions category\n   * @param {Object} pluggable - an instance of the plugin/pluggable\n   **/\n\n\n  Predictions.prototype.addPluggable = function (pluggable) {\n    if (this.getPluggable(pluggable.getProviderName())) {\n      throw new Error(\"Pluggable with name \" + pluggable.getProviderName() + \" has already been added.\");\n    }\n\n    var pluggableAdded = false;\n\n    if (this.implementsConvertPluggable(pluggable)) {\n      this._convertPluggables.push(pluggable);\n\n      pluggableAdded = true;\n    }\n\n    if (this.implementsIdentifyPluggable(pluggable)) {\n      this._identifyPluggables.push(pluggable);\n\n      pluggableAdded = true;\n    }\n\n    if (this.implementsInterpretPluggable(pluggable)) {\n      this._interpretPluggables.push(pluggable);\n\n      pluggableAdded = true;\n    }\n\n    if (pluggableAdded) {\n      this.configurePluggable(pluggable);\n    }\n  };\n  /**\n   * Get the plugin object\n   * @param providerName - the name of the plugin\n   */\n\n\n  Predictions.prototype.getPluggable = function (providerName) {\n    var pluggable = this.getAllProviders().find(function (pluggable) {\n      return pluggable.getProviderName() === providerName;\n    });\n\n    if (pluggable === undefined) {\n      logger.debug('No plugin found with providerName=>', providerName);\n      return null;\n    } else return pluggable;\n  };\n  /**\n   * Remove the plugin object\n   * @param providerName - the name of the plugin\n   */\n\n\n  Predictions.prototype.removePluggable = function (providerName) {\n    this._convertPluggables = this._convertPluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    this._identifyPluggables = this._identifyPluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    this._interpretPluggables = this._interpretPluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    return;\n  };\n  /**\n   * To make both top level providers and category level providers work with same interface and configuration\n   * this method duplicates Predictions config into parent level config (for top level provider) and\n   * category level config (such as convert, identify etc) and pass both to each provider.\n   */\n\n\n  Predictions.prototype.configure = function (options) {\n    var _this = this;\n\n    var predictionsConfig = options ? options.predictions || options : {};\n    predictionsConfig = __assign(__assign({}, predictionsConfig), options);\n    this._options = Object.assign({}, this._options, predictionsConfig);\n    logger.debug('configure Predictions', this._options);\n    this.getAllProviders().forEach(function (pluggable) {\n      return _this.configurePluggable(pluggable);\n    });\n  };\n\n  Predictions.prototype.interpret = function (input, options) {\n    var pluggableToExecute = this.getPluggableToExecute(this._interpretPluggables, options);\n    return pluggableToExecute.interpret(input);\n  };\n\n  Predictions.prototype.convert = function (input, options) {\n    var pluggableToExecute = this.getPluggableToExecute(this._convertPluggables, options);\n    return pluggableToExecute.convert(input);\n  };\n\n  Predictions.prototype.identify = function (input, options) {\n    var pluggableToExecute = this.getPluggableToExecute(this._identifyPluggables, options);\n    return pluggableToExecute.identify(input);\n  }; // tslint:disable-next-line: max-line-length\n\n\n  Predictions.prototype.getPluggableToExecute = function (pluggables, providerOptions) {\n    // Give preference to provider name first since it is more specific to this call, even if\n    // there is only one provider configured to error out if the name provided is not the one matched.\n    if (providerOptions && providerOptions.providerName) {\n      return __spreadArrays(pluggables).find(function (pluggable) {\n        return pluggable.getProviderName() === providerOptions.providerName;\n      });\n    } else {\n      if (pluggables.length === 1) {\n        return pluggables[0];\n      } else {\n        throw new Error('More than one or no providers are configured, ' + 'Either specify a provider name or configure exactly one provider');\n      }\n    }\n  };\n\n  Predictions.prototype.getAllProviders = function () {\n    return __spreadArrays(this._convertPluggables, this._identifyPluggables, this._interpretPluggables);\n  };\n\n  Predictions.prototype.configurePluggable = function (pluggable) {\n    var categoryConfig = Object.assign({}, this._options['predictions'], // Parent predictions config for the top level provider\n    this._options[pluggable.getCategory().toLowerCase()] // Actual category level config\n    );\n    pluggable.configure(categoryConfig);\n  };\n\n  Predictions.prototype.implementsConvertPluggable = function (obj) {\n    return obj && typeof obj.convert === 'function';\n  };\n\n  Predictions.prototype.implementsIdentifyPluggable = function (obj) {\n    return obj && typeof obj.identify === 'function';\n  };\n\n  Predictions.prototype.implementsInterpretPluggable = function (obj) {\n    return obj && typeof obj.interpret === 'function';\n  };\n\n  return Predictions;\n}();\n\nexport default Predictions;","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","logger","options","_options","_convertPluggables","_identifyPluggables","_interpretPluggables","Predictions","pluggable","getPluggable","getProviderName","Error","pluggableAdded","implementsConvertPluggable","push","implementsIdentifyPluggable","implementsInterpretPluggable","configurePluggable","providerName","getAllProviders","find","undefined","debug","filter","predictionsConfig","predictions","Object","assign","forEach","input","pluggableToExecute","getPluggableToExecute","interpret","convert","identify","pluggables","providerOptions","__spreadArrays","length","categoryConfig","getCategory","toLowerCase","configure","obj"],"sourceRoot":"","sources":["../src/Predictions.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}