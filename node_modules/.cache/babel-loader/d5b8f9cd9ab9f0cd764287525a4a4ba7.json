{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport StorageClass from './Storage';\nimport Amplify, { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('Storage');\nvar _instance = null;\n\nif (!_instance) {\n  logger.debug('Create Storage Instance');\n  _instance = new StorageClass();\n  _instance.vault = new StorageClass();\n  var old_configure_1 = _instance.configure;\n\n  _instance.configure = function (options) {\n    logger.debug('storage configure called');\n\n    var vaultConfig = __assign({}, old_configure_1.call(_instance, options)); // set level private for each provider for the vault\n\n\n    Object.keys(vaultConfig).forEach(function (providerName) {\n      if (typeof vaultConfig[providerName] !== 'string') {\n        vaultConfig[providerName] = __assign(__assign({}, vaultConfig[providerName]), {\n          level: 'private'\n        });\n      }\n    });\n    logger.debug('storage vault configure called');\n\n    _instance.vault.configure(vaultConfig);\n  };\n}\n\nvar Storage = _instance;\nAmplify.register(Storage);\nexport default Storage;\nexport { StorageClass };\nexport * from './Providers';","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,OAAOA,YAAP,MAAyB,WAAzB;AAGA,OAAOC,OAAP,IAAkBC,aAAa,IAAIC,MAAnC,QAAiD,mBAAjD;AAEA,IAAMC,MAAM,GAAG,IAAID,MAAJ,CAAW,SAAX,CAAf;AAEA,IAAIE,SAAS,GAAiB,IAA9B;;AAEA,IAAI,CAACA,SAAL,EAAgB;AACfD,QAAM,CAACE,KAAP,CAAa,yBAAb;AACAD,WAAS,GAAG,IAAIL,YAAJ,EAAZ;AACAK,WAAS,CAACE,KAAV,GAAkB,IAAIP,YAAJ,EAAlB;AAEA,MAAMQ,eAAa,GAAGH,SAAS,CAACI,SAAhC;;AACAJ,WAAS,CAACI,SAAV,GAAsB,mBAAO;AAC5BL,UAAM,CAACE,KAAP,CAAa,0BAAb;;AACA,QAAMI,WAAW,gBAAQF,eAAa,CAACG,IAAd,CAAmBN,SAAnB,EAA8BO,OAA9B,CAAR,CAAjB,CAF4B,CAI5B;;;AACAC,UAAM,CAACC,IAAP,CAAYJ,WAAZ,EAAyBK,OAAzB,CAAiC,wBAAY;AAC5C,UAAI,OAAOL,WAAW,CAACM,YAAD,CAAlB,KAAqC,QAAzC,EAAmD;AAClDN,mBAAW,CAACM,YAAD,CAAX,GAAyBC,sBACrBP,WAAW,CAACM,YAAD,CADU,GACI;AAC5BE,eAAK,EAAE;AADqB,SADJ,CAAzB;AAIA;AACD,KAPD;AAQAd,UAAM,CAACE,KAAP,CAAa,gCAAb;;AACAD,aAAS,CAACE,KAAV,CAAgBE,SAAhB,CAA0BC,WAA1B;AACA,GAfD;AAgBA;;AAED,IAAMS,OAAO,GAAGd,SAAhB;AACAJ,OAAO,CAACmB,QAAR,CAAiBD,OAAjB;AAEA,eAAeA,OAAf;AACA,SAASnB,YAAT;AAEA,cAAc,aAAd","names":["StorageClass","Amplify","ConsoleLogger","Logger","logger","_instance","debug","vault","old_configure_1","configure","vaultConfig","call","options","Object","keys","forEach","providerName","__assign","level","Storage","register"],"sourceRoot":"","sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}