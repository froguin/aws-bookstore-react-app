{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { AbstractConvertPredictionsProvider } from '../types/Providers/AbstractConvertPredictionsProvider';\nimport * as Translate from 'aws-sdk/clients/translate';\nimport * as TextToSpeech from 'aws-sdk/clients/polly';\nimport { isBytesSource } from '../types';\nimport { Credentials, ConsoleLogger as Logger, Signer } from '@aws-amplify/core';\nimport { EventStreamMarshaller } from '@aws-sdk/eventstream-marshaller';\nimport { fromUtf8, toUtf8 } from '@aws-sdk/util-utf8-node';\nvar logger = new Logger('AmazonAIConvertPredictionsProvider');\nvar eventBuilder = new EventStreamMarshaller(toUtf8, fromUtf8);\n\nvar AmazonAIConvertPredictionsProvider =\n/** @class */\nfunction (_super) {\n  __extends(AmazonAIConvertPredictionsProvider, _super);\n\n  function AmazonAIConvertPredictionsProvider() {\n    var _this = _super.call(this) || this;\n\n    _this.inputSampleRate = 44100;\n    _this.outputSampleRate = 16000;\n    return _this;\n  }\n\n  AmazonAIConvertPredictionsProvider.prototype.getProviderName = function () {\n    return 'AmazonAIConvertPredictionsProvider';\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.translateText = function (input) {\n    var _this = this;\n\n    logger.debug('Starting translation');\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a, _b, _c, _d, _e, sourceLanguage, _f, targetLanguage, _g, region, credentials, sourceLanguageCode, targetLanguageCode;\n\n        return __generator(this, function (_h) {\n          switch (_h.label) {\n            case 0:\n              _a = this._config.translateText, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = _c === void 0 ? {} : _c, _e = _d.sourceLanguage, sourceLanguage = _e === void 0 ? '' : _e, _f = _d.targetLanguage, targetLanguage = _f === void 0 ? '' : _f, _g = _b.region, region = _g === void 0 ? '' : _g;\n\n              if (!region) {\n                return [2\n                /*return*/\n                , rej('region not configured for transcription')];\n              }\n\n              return [4\n              /*yield*/\n              , Credentials.get()];\n\n            case 1:\n              credentials = _h.sent();\n\n              if (!credentials) {\n                return [2\n                /*return*/\n                , rej('No credentials')];\n              }\n\n              sourceLanguageCode = input.translateText.source.language || sourceLanguage;\n              targetLanguageCode = input.translateText.targetLanguage || targetLanguage;\n\n              if (!sourceLanguageCode || !targetLanguageCode) {\n                return [2\n                /*return*/\n                , rej('Please provide both source and target language')];\n              }\n\n              this.translate = new Translate({\n                region: region,\n                credentials: credentials\n              });\n              this.translate.translateText({\n                SourceLanguageCode: sourceLanguageCode,\n                TargetLanguageCode: targetLanguageCode,\n                Text: input.translateText.source.text\n              }, function (err, data) {\n                logger.debug({\n                  err: err,\n                  data: data\n                });\n\n                if (err) {\n                  return rej(err);\n                } else {\n                  return res({\n                    text: data.TranslatedText,\n                    language: data.TargetLanguageCode\n                  });\n                }\n              });\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.convertTextToSpeech = function (input) {\n    var _this = this;\n\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, _a, _b, _c, _d, VoiceId, _e, region, voiceId;\n\n        return __generator(this, function (_f) {\n          switch (_f.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , Credentials.get()];\n\n            case 1:\n              credentials = _f.sent();\n\n              if (!credentials) {\n                return [2\n                /*return*/\n                , rej('No credentials')];\n              }\n\n              _a = this._config.speechGenerator, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = (_c === void 0 ? {} : _c).VoiceId, VoiceId = _d === void 0 ? '' : _d, _e = _b.region, region = _e === void 0 ? '' : _e;\n\n              if (!input.textToSpeech.source) {\n                return [2\n                /*return*/\n                , rej('Source needs to be provided in the input')];\n              }\n\n              voiceId = input.textToSpeech.voiceId || VoiceId;\n\n              if (!region) {\n                return [2\n                /*return*/\n                , rej('Region was undefined. Did you enable speech generator using amplify CLI?')];\n              }\n\n              if (!voiceId) {\n                return [2\n                /*return*/\n                , rej('VoiceId was undefined.')];\n              }\n\n              this.textToSpeech = new TextToSpeech({\n                region: region,\n                credentials: credentials\n              });\n              this.textToSpeech.synthesizeSpeech({\n                OutputFormat: 'mp3',\n                Text: input.textToSpeech.source.text,\n                VoiceId: voiceId,\n                TextType: 'text',\n                SampleRate: '24000'\n              }, function (err, data) {\n                if (err) {\n                  rej(err);\n                } else {\n                  var blob = new Blob([data.AudioStream], {\n                    type: data.ContentType\n                  });\n                  var url = URL.createObjectURL(blob);\n                  res({\n                    speech: {\n                      url: url\n                    },\n                    audioStream: data.AudioStream.buffer,\n                    text: input.textToSpeech.source.text\n                  });\n                }\n              });\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.convertSpeechToText = function (input) {\n    var _this = this;\n\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, _a, _b, _c, _d, languageCode, _e, region, _f, source, _g, language, connection, fullText, err_1, err_2;\n\n        return __generator(this, function (_h) {\n          switch (_h.label) {\n            case 0:\n              _h.trys.push([0, 7,, 8]);\n\n              logger.debug('starting transcription..');\n              return [4\n              /*yield*/\n              , Credentials.get()];\n\n            case 1:\n              credentials = _h.sent();\n\n              if (!credentials) {\n                return [2\n                /*return*/\n                , rej('No credentials')];\n              }\n\n              _a = this._config.transcription, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = (_c === void 0 ? {} : _c).language, languageCode = _d === void 0 ? '' : _d, _e = _b.region, region = _e === void 0 ? '' : _e;\n\n              if (!region) {\n                return [2\n                /*return*/\n                , rej('region not configured for transcription')];\n              }\n\n              if (!languageCode) {\n                return [2\n                /*return*/\n                , rej('languageCode not configured or provided for transcription')];\n              }\n\n              _f = input.transcription, source = _f.source, _g = _f.language, language = _g === void 0 ? languageCode : _g;\n              if (!isBytesSource(source)) return [3\n              /*break*/\n              , 6];\n              return [4\n              /*yield*/\n              , this.openConnectionWithTranscribe({\n                credentials: credentials,\n                region: region,\n                languageCode: language\n              })];\n\n            case 2:\n              connection = _h.sent();\n              _h.label = 3;\n\n            case 3:\n              _h.trys.push([3, 5,, 6]);\n\n              return [4\n              /*yield*/\n              , this.sendDataToTranscribe({\n                connection: connection,\n                raw: source.bytes\n              })];\n\n            case 4:\n              fullText = _h.sent();\n              return [2\n              /*return*/\n              , res({\n                transcription: {\n                  fullText: fullText\n                }\n              })];\n\n            case 5:\n              err_1 = _h.sent();\n              rej(err_1);\n              return [3\n              /*break*/\n              , 6];\n\n            case 6:\n              return [2\n              /*return*/\n              , rej('Source types other than byte source are not supported.')];\n\n            case 7:\n              err_2 = _h.sent();\n              return [2\n              /*return*/\n              , rej(err_2.name + ': ' + err_2.message)];\n\n            case 8:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe = function (message) {\n    var decodedMessage = '';\n    var transcribeMessage = eventBuilder.unmarshall(Buffer.from(message.data));\n    var transcribeMessageJson = JSON.parse(String.fromCharCode.apply(String, transcribeMessage.body));\n\n    if (transcribeMessage.headers[':message-type'].value === 'exception') {\n      logger.debug('exception', JSON.stringify(transcribeMessageJson.Message, null, 2));\n      throw new Error(transcribeMessageJson.Message);\n    } else if (transcribeMessage.headers[':message-type'].value === 'event') {\n      if (transcribeMessageJson.Transcript.Results.length > 0) {\n        if (transcribeMessageJson.Transcript.Results[0].Alternatives.length > 0) {\n          if (transcribeMessageJson.Transcript.Results[0].Alternatives[0].Transcript.length > 0) {\n            if (transcribeMessageJson.Transcript.Results[0].IsPartial === false) {\n              decodedMessage = transcribeMessageJson.Transcript.Results[0].Alternatives[0].Transcript + '\\n';\n              logger.debug({\n                decodedMessage: decodedMessage\n              });\n            } else {\n              logger.debug({\n                transcript: transcribeMessageJson.Transcript.Results[0].Alternatives[0]\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return decodedMessage;\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.sendDataToTranscribe = function (_a) {\n    var _this = this;\n\n    var connection = _a.connection,\n        raw = _a.raw;\n    return new Promise(function (res, rej) {\n      var fullText = '';\n\n      connection.onmessage = function (message) {\n        try {\n          var decodedMessage = AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe(message);\n\n          if (decodedMessage) {\n            fullText += decodedMessage + ' ';\n          }\n        } catch (err) {\n          logger.debug(err);\n          rej(err.message);\n        }\n      };\n\n      connection.onerror = function (errorEvent) {\n        logger.debug({\n          errorEvent: errorEvent\n        });\n        rej('failed to transcribe, network error');\n      };\n\n      connection.onclose = function (closeEvent) {\n        logger.debug({\n          closeEvent: closeEvent\n        });\n        return res(fullText.trim());\n      };\n\n      logger.debug({\n        raw: raw\n      });\n\n      if (Array.isArray(raw)) {\n        for (var i = 0; i < raw.length - 1023; i += 1024) {\n          var data = raw.slice(i, i + 1024);\n\n          _this.sendEncodedDataToTranscribe(connection, data);\n        }\n      } // sending end frame\n\n\n      var endFrameEventMessage = _this.getAudioEventMessage(Buffer.from([]));\n\n      var endFrameBinary = eventBuilder.marshall(endFrameEventMessage);\n      connection.send(endFrameBinary);\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.sendEncodedDataToTranscribe = function (connection, data) {\n    var downsampledBuffer = this.downsampleBuffer({\n      buffer: data\n    });\n    var pcmEncodedBuffer = this.pcmEncode(downsampledBuffer);\n    var audioEventMessage = this.getAudioEventMessage(Buffer.from(pcmEncodedBuffer));\n    var binary = eventBuilder.marshall(audioEventMessage);\n    connection.send(binary);\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.getAudioEventMessage = function (buffer) {\n    var audioEventMessage = {\n      body: buffer,\n      headers: {\n        ':message-type': {\n          type: 'string',\n          value: 'event'\n        },\n        ':event-type': {\n          type: 'string',\n          value: 'AudioEvent'\n        }\n      }\n    };\n    return audioEventMessage;\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.pcmEncode = function (input) {\n    var offset = 0;\n    var buffer = new ArrayBuffer(input.length * 2);\n    var view = new DataView(buffer);\n\n    for (var i = 0; i < input.length; i++, offset += 2) {\n      var s = Math.max(-1, Math.min(1, input[i]));\n      view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n    }\n\n    return buffer;\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.downsampleBuffer = function (_a) {\n    var buffer = _a.buffer;\n\n    if (this.outputSampleRate === this.inputSampleRate) {\n      return buffer;\n    }\n\n    var sampleRateRatio = this.inputSampleRate / this.outputSampleRate;\n    var newLength = Math.round(buffer.length / sampleRateRatio);\n    var result = new Float32Array(newLength);\n    var offsetResult = 0;\n    var offsetBuffer = 0;\n\n    while (offsetResult < result.length) {\n      var nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n      var accum = 0,\n          count = 0;\n\n      for (var i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n        accum += buffer[i];\n        count++;\n      }\n\n      result[offsetResult] = accum / count;\n      offsetResult++;\n      offsetBuffer = nextOffsetBuffer;\n    }\n\n    return result;\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.openConnectionWithTranscribe = function (_a) {\n    var _this = this;\n\n    var userCredentials = _a.credentials,\n        region = _a.region,\n        languageCode = _a.languageCode;\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var access_key, secret_key, session_token, credentials, signedUrl, connection;\n        return __generator(this, function (_a) {\n          access_key = userCredentials.accessKeyId, secret_key = userCredentials.secretAccessKey, session_token = userCredentials.sessionToken;\n          credentials = {\n            access_key: access_key,\n            secret_key: secret_key,\n            session_token: session_token\n          };\n          signedUrl = this.generateTranscribeUrl({\n            credentials: credentials,\n            region: region,\n            languageCode: languageCode\n          });\n          logger.debug('connecting...');\n          connection = new WebSocket(signedUrl);\n          connection.binaryType = 'arraybuffer';\n\n          connection.onopen = function () {\n            logger.debug('connected');\n            res(connection);\n          };\n\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.generateTranscribeUrl = function (_a) {\n    var credentials = _a.credentials,\n        region = _a.region,\n        languageCode = _a.languageCode;\n    var url = [\"wss://transcribestreaming.\" + region + \".amazonaws.com:8443\", '/stream-transcription-websocket?', \"media-encoding=pcm&\", \"sample-rate=16000&\", \"language-code=\" + languageCode].join('');\n    var signedUrl = Signer.signUrl(url, credentials, {\n      region: region,\n      service: 'transcribe'\n    }, 300);\n    return signedUrl;\n  };\n\n  return AmazonAIConvertPredictionsProvider;\n}(AbstractConvertPredictionsProvider);\n\nexport default AmazonAIConvertPredictionsProvider;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,kCAAT,QAAmD,uDAAnD;AACA,OAAO,KAAKC,SAAZ,MAA2B,2BAA3B;AACA,OAAO,KAAKC,YAAZ,MAA8B,uBAA9B;AACA,SAOCC,aAPD,QAQO,UARP;AASA,SACCC,WADD,EAECC,aAAa,IAAIC,MAFlB,EAGCC,MAHD,QAIO,mBAJP;AAKA,SACCC,qBADD,QAGO,iCAHP;AAIA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,yBAAjC;AAEA,IAAMC,MAAM,GAAG,IAAIL,MAAJ,CAAW,oCAAX,CAAf;AACA,IAAMM,YAAY,GAAG,IAAIJ,qBAAJ,CAA0BE,MAA1B,EAAkCD,QAAlC,CAArB;;AAEA;AAAA;AAAA;AAAgEI;;AAG/D;AAAA,gBACCC,qBAAO,IADR;;AAySQC,4BAAkB,KAAlB;AACAA,6BAAmB,KAAnB;;AAxSP;;AAEDC;AACC,WAAO,oCAAP;AACA,GAFD;;AAIUA,+DAAV,UACCC,KADD,EAC0B;AAD1B;;AAGCN,UAAM,CAACO,KAAP,CAAa,sBAAb;AACA,WAAO,IAAIC,OAAJ,CAAY,UAAOC,GAAP,EAAYC,GAAZ,EAAe;AAAA;;;;;;AAEhCC,mBAIG,KAAKC,OAAL,CAAYC,aAJf,uBAGI,EAHJ,GAGMF,EAHN,EACCG,gBADD,EACCC,qBAAyD,EAAzD,GAA2DD,EAD5D,EACaE,sBADb,EACaC,cAAc,mBAAG,EAAH,GAAKD,EADhC,EACkCE,sBADlC,EACkCC,cAAc,mBAAG,EAAH,GAAKD,EADrD,EAECE,cAFD,EAECC,MAAM,mBAAG,EAAH,GAAKD,EAFZ;;AAMD,kBAAI,CAACC,MAAL,EAAa;AACZ;AAAA;AAAA,kBAAOX,GAAG,CAAC,yCAAD,CAAV;AACA;;AAEmB;AAAA;AAAA,gBAAMjB,WAAW,CAAC6B,GAAZ,EAAN;;;AAAdC,yBAAW,GAAGC,SAAd;;AACN,kBAAI,CAACD,WAAL,EAAkB;AACjB;AAAA;AAAA,kBAAOb,GAAG,CAAC,gBAAD,CAAV;AACA;;AACKe,gCAAkB,GACvBnB,KAAK,CAACO,aAAN,CAAoBa,MAApB,CAA2BC,QAA3B,IAAuCV,cADlC;AAEAW,gCAAkB,GACvBtB,KAAK,CAACO,aAAN,CAAoBM,cAApB,IAAsCA,cADjC;;AAEN,kBAAI,CAACM,kBAAD,IAAuB,CAACG,kBAA5B,EAAgD;AAC/C;AAAA;AAAA,kBAAOlB,GAAG,CAAC,gDAAD,CAAV;AACA;;AAED,mBAAKmB,SAAL,GAAiB,IAAIvC,SAAJ,CAAc;AAAE+B,sBAAM,QAAR;AAAUE,2BAAW;AAArB,eAAd,CAAjB;AACA,mBAAKM,SAAL,CAAehB,aAAf,CACC;AACCiB,kCAAkB,EAAEL,kBADrB;AAECM,kCAAkB,EAAEH,kBAFrB;AAGCI,oBAAI,EAAE1B,KAAK,CAACO,aAAN,CAAoBa,MAApB,CAA2BO;AAHlC,eADD,EAOC,UAACC,GAAD,EAAMC,IAAN,EAAU;AACTnC,sBAAM,CAACO,KAAP,CAAa;AAAE2B,qBAAG,KAAL;AAAOC,sBAAI;AAAX,iBAAb;;AACA,oBAAID,GAAJ,EAAS;AACR,yBAAOxB,GAAG,CAACwB,GAAD,CAAV;AACA,iBAFD,MAEO;AACN,yBAAOzB,GAAG,CAAC;AACVwB,wBAAI,EAAEE,IAAI,CAACC,cADD;AAEVT,4BAAQ,EAAEQ,IAAI,CAACJ;AAFL,mBAAD,CAAV;AAIA;AACD,eAjBF;;;;;;OAzBiC;AA4CjC,KA5CM,CAAP;AA6CA,GAjDS;;AAmDA1B,qEAAV,UACCC,KADD,EACyB;AADzB;;AAGC,WAAO,IAAIE,OAAJ,CAAY,UAAOC,GAAP,EAAYC,GAAZ,EAAe;AAAA;;;;;;AACb;AAAA;AAAA,gBAAMjB,WAAW,CAAC6B,GAAZ,EAAN;;;AAAdC,yBAAW,GAAGL,SAAd;;AACN,kBAAI,CAACK,WAAL,EAAkB;AACjB;AAAA;AAAA,kBAAOb,GAAG,CAAC,gBAAD,CAAV;AACA;;AAEAC,mBACG,KAAKC,OAAL,CAAYyB,eADf,uBAAoE,EAApE,GAAsE1B,EAAtE,EAAmBG,gBAAnB,EAA+BC,sBAAiB,EAAjB,GAAmBD,EAAnB,EAAmBwB,OAAlD,EAA+BA,OAAO,mBAAG,EAAH,GAAKvB,EAA3C,EAAoDC,cAApD,EAAoDK,MAAM,mBAAG,EAAH,GAAKL,EAA/D;;AAGD,kBAAI,CAACV,KAAK,CAACiC,YAAN,CAAmBb,MAAxB,EAAgC;AAC/B;AAAA;AAAA,kBAAOhB,GAAG,CAAC,0CAAD,CAAV;AACA;;AACK8B,qBAAO,GAAGlC,KAAK,CAACiC,YAAN,CAAmBC,OAAnB,IAA8BF,OAAxC;;AAEN,kBAAI,CAACjB,MAAL,EAAa;AACZ;AAAA;AAAA,kBAAOX,GAAG,CACT,0EADS,CAAV;AAGA;;AAED,kBAAI,CAAC8B,OAAL,EAAc;AACb;AAAA;AAAA,kBAAO9B,GAAG,CAAC,wBAAD,CAAV;AACA;;AAED,mBAAK6B,YAAL,GAAoB,IAAIhD,YAAJ,CAAiB;AAAE8B,sBAAM,QAAR;AAAUE,2BAAW;AAArB,eAAjB,CAApB;AACA,mBAAKgB,YAAL,CAAkBE,gBAAlB,CACC;AACCC,4BAAY,EAAE,KADf;AAECV,oBAAI,EAAE1B,KAAK,CAACiC,YAAN,CAAmBb,MAAnB,CAA0BO,IAFjC;AAGCK,uBAAO,EAAEE,OAHV;AAICG,wBAAQ,EAAE,MAJX;AAKCC,0BAAU,EAAE;AALb,eADD,EASC,UAACV,GAAD,EAAMC,IAAN,EAAU;AACT,oBAAID,GAAJ,EAAS;AACRxB,qBAAG,CAACwB,GAAD,CAAH;AACA,iBAFD,MAEO;AACN,sBAAMW,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACX,IAAI,CAACY,WAAN,CAAT,EAA4C;AACxDC,wBAAI,EAAEb,IAAI,CAACc;AAD6C,mBAA5C,CAAb;AAGA,sBAAMC,GAAG,GAAGC,GAAG,CAACC,eAAJ,CAAoBP,IAApB,CAAZ;AACApC,qBAAG,CAAC;AACH4C,0BAAM,EAAE;AAAEH,yBAAG;AAAL,qBADL;AAEHI,+BAAW,EAAGnB,IAAI,CAACY,WAAL,CAAyBQ,MAFpC;AAGHtB,wBAAI,EAAE3B,KAAK,CAACiC,YAAN,CAAmBb,MAAnB,CAA0BO;AAH7B,mBAAD,CAAH;AAKA;AACD,eAvBF;;;;;;OAzBiC;AAkDjC,KAlDM,CAAP;AAmDA,GAtDS;;AAwDA5B,qEAAV,UACCC,KADD,EACyB;AADzB;;AAGC,WAAO,IAAIE,OAAJ,CAAY,UAAOC,GAAP,EAAYC,GAAZ,EAAe;AAAA;;;;;;;;AAEhCV,oBAAM,CAACO,KAAP,CAAa,0BAAb;AACoB;AAAA;AAAA,gBAAMd,WAAW,CAAC6B,GAAZ,EAAN;;;AAAdC,yBAAW,GAAGC,SAAd;;AACN,kBAAI,CAACD,WAAL,EAAkB;AACjB;AAAA;AAAA,kBAAOb,GAAG,CAAC,gBAAD,CAAV;AACA;;AAEAC,mBAIG,KAAKC,OAAL,CAAY4C,aAJf,uBAGI,EAHJ,GAGM7C,EAHN,EACCG,gBADD,EACaC,sBAAgC,EAAhC,GAAkCD,EAAlC,EAAkCa,QAD/C,EACuB8B,YAAY,mBAAG,EAAH,GAAK1C,EADxC,EAECC,cAFD,EAECK,MAAM,mBAAG,EAAH,GAAKL,EAFZ;;AAKD,kBAAI,CAACK,MAAL,EAAa;AACZ;AAAA;AAAA,kBAAOX,GAAG,CAAC,yCAAD,CAAV;AACA;;AACD,kBAAI,CAAC+C,YAAL,EAAmB;AAClB;AAAA;AAAA,kBAAO/C,GAAG,CACT,2DADS,CAAV;AAGA;;AAEAQ,mBACGZ,KAAK,cADR,EAAiBoB,MAAM,YAAvB,EAAyBN,gBAAzB,EAAyBO,QAAQ,mBAAG8B,YAAH,GAAerC,EAAhD;mBAGG5B,aAAa,CAACkC,MAAD,GAAb;AAAA;AAAA;AACgB;AAAA;AAAA,gBAAM,KAAKgC,4BAAL,CAAkC;AAC1DnC,2BAAW,aAD+C;AAE1DF,sBAAM,QAFoD;AAG1DoC,4BAAY,EAAE9B;AAH4C,eAAlC,CAAN;;;AAAbgC,wBAAU,GAAGnC,SAAb;;;;;;AAOY;AAAA;AAAA,gBAAM,KAAKoC,oBAAL,CAA0B;AAChDD,0BAAU,YADsC;AAEhDE,mBAAG,EAAEnC,MAAM,CAACoC;AAFoC,eAA1B,CAAN;;;AAAXC,sBAAQ,GAAGvC,SAAX;AAIN;AAAA;AAAA,gBAAOf,GAAG,CAAC;AACV+C,6BAAa,EAAE;AACdO,0BAAQ;AADM;AADL,eAAD,CAAV;;;;AAMArD,iBAAG,CAACsD,KAAD,CAAH;;;;;;AAIF;AAAA;AAAA,gBAAOtD,GAAG,CAAC,wDAAD,CAAV;;;;AAEA;AAAA;AAAA,gBAAOA,GAAG,CAACuD,KAAG,CAACC,IAAJ,GAAW,IAAX,GAAkBD,KAAG,CAACE,OAAvB,CAAV;;;;;;;;OAjDgC;AAmDjC,KAnDM,CAAP;AAoDA,GAvDS;;AAyDI9D,mEAAd,UAA0C8D,OAA1C,EAAiD;AAChD,QAAIC,cAAc,GAAG,EAArB;AACA,QAAMC,iBAAiB,GAAGpE,YAAY,CAACqE,UAAb,CACzBC,MAAM,CAACC,IAAP,CAAYL,OAAO,CAAChC,IAApB,CADyB,CAA1B;AAGA,QAAMsC,qBAAqB,GAAGC,IAAI,CAACC,KAAL,CAC7BC,MAAM,CAACC,YAAP,CAAoBC,KAApB,CAA0BF,MAA1B,EAAkCP,iBAAiB,CAACU,IAApD,CAD6B,CAA9B;;AAGA,QAAIV,iBAAiB,CAACW,OAAlB,CAA0B,eAA1B,EAA2CC,KAA3C,KAAqD,WAAzD,EAAsE;AACrEjF,YAAM,CAACO,KAAP,CACC,WADD,EAECmE,IAAI,CAACQ,SAAL,CAAeT,qBAAqB,CAACU,OAArC,EAA8C,IAA9C,EAAoD,CAApD,CAFD;AAIA,YAAM,IAAIC,KAAJ,CAAUX,qBAAqB,CAACU,OAAhC,CAAN;AACA,KAND,MAMO,IAAId,iBAAiB,CAACW,OAAlB,CAA0B,eAA1B,EAA2CC,KAA3C,KAAqD,OAAzD,EAAkE;AACxE,UAAIR,qBAAqB,CAACY,UAAtB,CAAiCC,OAAjC,CAAyCC,MAAzC,GAAkD,CAAtD,EAAyD;AACxD,YACCd,qBAAqB,CAACY,UAAtB,CAAiCC,OAAjC,CAAyC,CAAzC,EAA4CE,YAA5C,CAAyDD,MAAzD,GAAkE,CADnE,EAEE;AACD,cACCd,qBAAqB,CAACY,UAAtB,CAAiCC,OAAjC,CAAyC,CAAzC,EAA4CE,YAA5C,CAAyD,CAAzD,EACEH,UADF,CACaE,MADb,GACsB,CAFvB,EAGE;AACD,gBACCd,qBAAqB,CAACY,UAAtB,CAAiCC,OAAjC,CAAyC,CAAzC,EAA4CG,SAA5C,KAA0D,KAD3D,EAEE;AACDrB,4BAAc,GACbK,qBAAqB,CAACY,UAAtB,CAAiCC,OAAjC,CAAyC,CAAzC,EAA4CE,YAA5C,CAAyD,CAAzD,EACEH,UADF,GACe,IAFhB;AAGArF,oBAAM,CAACO,KAAP,CAAa;AAAE6D,8BAAc;AAAhB,eAAb;AACA,aAPD,MAOO;AACNpE,oBAAM,CAACO,KAAP,CAAa;AACZmF,0BAAU,EACTjB,qBAAqB,CAACY,UAAtB,CAAiCC,OAAjC,CAAyC,CAAzC,EAA4CE,YAA5C,CAAyD,CAAzD;AAFW,eAAb;AAIA;AACD;AACD;AACD;AACD;;AACD,WAAOpB,cAAP;AACA,GAzCa;;AA2CN/D,sEAAR,UAA6BM,EAA7B,EAAgD;AAAhD;;QAA+BgD;QAAYE;AAC1C,WAAO,IAAIrD,OAAJ,CAAY,UAACC,GAAD,EAAMC,GAAN,EAAS;AAC3B,UAAIqD,QAAQ,GAAG,EAAf;;AACAJ,gBAAU,CAACgC,SAAX,GAAuB,mBAAO;AAC7B,YAAI;AACH,cAAMvB,cAAc,GAAG/D,kCAAkC,CAACuF,2BAAnC,CACtBzB,OADsB,CAAvB;;AAGA,cAAIC,cAAJ,EAAoB;AACnBL,oBAAQ,IAAIK,cAAc,GAAG,GAA7B;AACA;AACD,SAPD,CAOE,OAAOlC,GAAP,EAAY;AACblC,gBAAM,CAACO,KAAP,CAAa2B,GAAb;AACAxB,aAAG,CAACwB,GAAG,CAACiC,OAAL,CAAH;AACA;AACD,OAZD;;AAcAR,gBAAU,CAACkC,OAAX,GAAqB,sBAAU;AAC9B7F,cAAM,CAACO,KAAP,CAAa;AAAEuF,oBAAU;AAAZ,SAAb;AACApF,WAAG,CAAC,qCAAD,CAAH;AACA,OAHD;;AAKAiD,gBAAU,CAACoC,OAAX,GAAqB,sBAAU;AAC9B/F,cAAM,CAACO,KAAP,CAAa;AAAEyF,oBAAU;AAAZ,SAAb;AACA,eAAOvF,GAAG,CAACsD,QAAQ,CAACkC,IAAT,EAAD,CAAV;AACA,OAHD;;AAKAjG,YAAM,CAACO,KAAP,CAAa;AAAEsD,WAAG;AAAL,OAAb;;AAEA,UAAIqC,KAAK,CAACC,OAAN,CAActC,GAAd,CAAJ,EAAwB;AACvB,aAAK,IAAIuC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvC,GAAG,CAAC0B,MAAJ,GAAa,IAAjC,EAAuCa,CAAC,IAAI,IAA5C,EAAkD;AACjD,cAAMjE,IAAI,GAAG0B,GAAG,CAACwC,KAAJ,CAAUD,CAAV,EAAaA,CAAC,GAAG,IAAjB,CAAb;;AACAhG,eAAI,CAACkG,2BAAL,CAAiC3C,UAAjC,EAA6CxB,IAA7C;AACA;AACD,OAjC0B,CAmC3B;;;AACA,UAAMoE,oBAAoB,GAAGnG,KAAI,CAACoG,oBAAL,CAA0BjC,MAAM,CAACC,IAAP,CAAY,EAAZ,CAA1B,CAA7B;;AACA,UAAMiC,cAAc,GAAGxG,YAAY,CAACyG,QAAb,CAAsBH,oBAAtB,CAAvB;AACA5C,gBAAU,CAACgD,IAAX,CAAgBF,cAAhB;AACA,KAvCM,CAAP;AAwCA,GAzCO;;AA2CApG,6EAAR,UAAoCsD,UAApC,EAAgDxB,IAAhD,EAAoD;AACnD,QAAMyE,iBAAiB,GAAG,KAAKC,gBAAL,CAAsB;AAAEtD,YAAM,EAAEpB;AAAV,KAAtB,CAA1B;AACA,QAAM2E,gBAAgB,GAAG,KAAKC,SAAL,CAAeH,iBAAf,CAAzB;AACA,QAAMI,iBAAiB,GAAG,KAAKR,oBAAL,CACzBjC,MAAM,CAACC,IAAP,CAAYsC,gBAAZ,CADyB,CAA1B;AAGA,QAAMG,MAAM,GAAGhH,YAAY,CAACyG,QAAb,CAAsBM,iBAAtB,CAAf;AACArD,cAAU,CAACgD,IAAX,CAAgBM,MAAhB;AACA,GARO;;AAUA5G,sEAAR,UAA6BkD,MAA7B,EAAmC;AAClC,QAAMyD,iBAAiB,GAAG;AACzBjC,UAAI,EAAExB,MADmB;AAEzByB,aAAO,EAAE;AACR,yBAAiB;AAChBhC,cAAI,EAAE,QADU;AAEhBiC,eAAK,EAAE;AAFS,SADT;AAKR,uBAAe;AACdjC,cAAI,EAAE,QADQ;AAEdiC,eAAK,EAAE;AAFO;AALP;AAFgB,KAA1B;AAcA,WAAO+B,iBAAP;AACA,GAhBO;;AAkBA3G,2DAAR,UAAkBC,KAAlB,EAAuB;AACtB,QAAI4G,MAAM,GAAG,CAAb;AACA,QAAM3D,MAAM,GAAG,IAAI4D,WAAJ,CAAgB7G,KAAK,CAACiF,MAAN,GAAe,CAA/B,CAAf;AACA,QAAM6B,IAAI,GAAG,IAAIC,QAAJ,CAAa9D,MAAb,CAAb;;AACA,SAAK,IAAI6C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG9F,KAAK,CAACiF,MAA1B,EAAkCa,CAAC,IAAIc,MAAM,IAAI,CAAjD,EAAoD;AACnD,UAAMI,CAAC,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAC,CAAV,EAAaD,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYnH,KAAK,CAAC8F,CAAD,CAAjB,CAAb,CAAV;AACAgB,UAAI,CAACM,QAAL,CAAcR,MAAd,EAAsBI,CAAC,GAAG,CAAJ,GAAQA,CAAC,GAAG,MAAZ,GAAqBA,CAAC,GAAG,MAA/C,EAAuD,IAAvD;AACA;;AACD,WAAO/D,MAAP;AACA,GATO;;AAcAlD,kEAAR,UAAyBM,EAAzB,EAAmC;QAAR4C;;AAC1B,QAAI,KAAKoE,gBAAL,KAA0B,KAAKC,eAAnC,EAAoD;AACnD,aAAOrE,MAAP;AACA;;AAED,QAAMsE,eAAe,GAAG,KAAKD,eAAL,GAAuB,KAAKD,gBAApD;AACA,QAAMG,SAAS,GAAGP,IAAI,CAACQ,KAAL,CAAWxE,MAAM,CAACgC,MAAP,GAAgBsC,eAA3B,CAAlB;AACA,QAAMG,MAAM,GAAG,IAAIC,YAAJ,CAAiBH,SAAjB,CAAf;AACA,QAAII,YAAY,GAAG,CAAnB;AACA,QAAIC,YAAY,GAAG,CAAnB;;AACA,WAAOD,YAAY,GAAGF,MAAM,CAACzC,MAA7B,EAAqC;AACpC,UAAM6C,gBAAgB,GAAGb,IAAI,CAACQ,KAAL,CAAW,CAACG,YAAY,GAAG,CAAhB,IAAqBL,eAAhC,CAAzB;AACA,UAAIQ,KAAK,GAAG,CAAZ;AAAA,UACCC,KAAK,GAAG,CADT;;AAEA,WACC,IAAIlC,CAAC,GAAG+B,YADT,EAEC/B,CAAC,GAAGgC,gBAAJ,IAAwBhC,CAAC,GAAG7C,MAAM,CAACgC,MAFpC,EAGCa,CAAC,EAHF,EAIE;AACDiC,aAAK,IAAI9E,MAAM,CAAC6C,CAAD,CAAf;AACAkC,aAAK;AACL;;AACDN,YAAM,CAACE,YAAD,CAAN,GAAuBG,KAAK,GAAGC,KAA/B;AACAJ,kBAAY;AACZC,kBAAY,GAAGC,gBAAf;AACA;;AAED,WAAOJ,MAAP;AACA,GA5BO;;AA8BA3H,8EAAR,UAAqCM,EAArC,EAIC;AAJD;;QACC4H;QACAlH;QACAoC;AAEA,WAAO,IAAIjD,OAAJ,CAAY,UAAOC,GAAP,EAAYC,GAAZ,EAAe;AAAA;;;AAEnB8H,oBAAU,GAGpBD,eAAe,YAHL,EACIE,UAAU,GAExBF,eAAe,gBAHL,EAECG,aAAa,GACxBH,eAAe,aAHL;AAKRhH,qBAAW,GAAG;AACnBiH,sBAAU,YADS;AAEnBC,sBAAU,YAFS;AAGnBC,yBAAa;AAHM,WAAd;AAMAC,mBAAS,GAAG,KAAKC,qBAAL,CAA2B;AAC5CrH,uBAAW,aADiC;AAE5CF,kBAAM,QAFsC;AAG5CoC,wBAAY;AAHgC,WAA3B,CAAZ;AAMNzD,gBAAM,CAACO,KAAP,CAAa,eAAb;AACMoD,oBAAU,GAAG,IAAIkF,SAAJ,CAAcF,SAAd,CAAb;AAENhF,oBAAU,CAACmF,UAAX,GAAwB,aAAxB;;AACAnF,oBAAU,CAACoF,MAAX,GAAoB;AACnB/I,kBAAM,CAACO,KAAP,CAAa,WAAb;AACAE,eAAG,CAACkD,UAAD,CAAH;AACA,WAHD;;;;;;OAvBiC;AA2BjC,KA3BM,CAAP;AA4BA,GAjCO;;AAmCAtD,uEAAR,UAA8BM,EAA9B,EAAmE;QAAnCY;QAAaF;QAAQoC;AACpD,QAAMP,GAAG,GAAG,CACX,+BAA6B7B,MAA7B,GAAmC,qBADxB,EAEX,kCAFW,EAGX,qBAHW,EAIX,oBAJW,EAKX,mBAAiBoC,YALN,EAMVuF,IANU,CAML,EANK,CAAZ;AAQA,QAAML,SAAS,GAAG/I,MAAM,CAACqJ,OAAP,CACjB/F,GADiB,EAEjB3B,WAFiB,EAGjB;AAAEF,YAAM,QAAR;AAAU6H,aAAO,EAAE;AAAnB,KAHiB,EAIjB,GAJiB,CAAlB;AAOA,WAAOP,SAAP;AACA,GAjBO;;AAkBT;AAlYA,EAAgEtJ,kCAAhE","names":["AbstractConvertPredictionsProvider","Translate","TextToSpeech","isBytesSource","Credentials","ConsoleLogger","Logger","Signer","EventStreamMarshaller","fromUtf8","toUtf8","logger","eventBuilder","__extends","_super","_this","AmazonAIConvertPredictionsProvider","input","debug","Promise","res","rej","_a","_config","translateText","_c","_d","_e","sourceLanguage","_f","targetLanguage","_g","region","get","credentials","_h","sourceLanguageCode","source","language","targetLanguageCode","translate","SourceLanguageCode","TargetLanguageCode","Text","text","err","data","TranslatedText","speechGenerator","VoiceId","textToSpeech","voiceId","synthesizeSpeech","OutputFormat","TextType","SampleRate","blob","Blob","AudioStream","type","ContentType","url","URL","createObjectURL","speech","audioStream","buffer","transcription","languageCode","openConnectionWithTranscribe","connection","sendDataToTranscribe","raw","bytes","fullText","err_1","err_2","name","message","decodedMessage","transcribeMessage","unmarshall","Buffer","from","transcribeMessageJson","JSON","parse","String","fromCharCode","apply","body","headers","value","stringify","Message","Error","Transcript","Results","length","Alternatives","IsPartial","transcript","onmessage","serializeDataFromTranscribe","onerror","errorEvent","onclose","closeEvent","trim","Array","isArray","i","slice","sendEncodedDataToTranscribe","endFrameEventMessage","getAudioEventMessage","endFrameBinary","marshall","send","downsampledBuffer","downsampleBuffer","pcmEncodedBuffer","pcmEncode","audioEventMessage","binary","offset","ArrayBuffer","view","DataView","s","Math","max","min","setInt16","outputSampleRate","inputSampleRate","sampleRateRatio","newLength","round","result","Float32Array","offsetResult","offsetBuffer","nextOffsetBuffer","accum","count","userCredentials","access_key","secret_key","session_token","signedUrl","generateTranscribeUrl","WebSocket","binaryType","onopen","join","signUrl","service"],"sourceRoot":"","sources":["../../src/Providers/AmazonAIConvertPredictionsProvider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}